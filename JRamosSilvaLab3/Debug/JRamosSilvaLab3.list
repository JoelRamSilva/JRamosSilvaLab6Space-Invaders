
JRamosSilvaLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000844  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f0  080009f8  000019f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f0  080009f0  000019f8  2**0
                  CONTENTS
  4 .ARM          00000000  080009f0  080009f0  000019f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009f0  080009f8  000019f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f0  080009f0  000019f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009f4  080009f4  000019f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000019f8  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001166  00000000  00000000  00001a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000625  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000031b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000155  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016d3  00000000  00000000  000034fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002255  00000000  00000000  00004bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004c7c  00000000  00000000  00006e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000baa1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000058c  00000000  00000000  0000bae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080009d8 	.word	0x080009d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080009d8 	.word	0x080009d8

080001ec <applicationInit>:
 *      Author: joelrsilva
 */

#include "ApplicationCode.h"

void applicationInit(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	 greenLEDInit();
 80001f0:	f000 f819 	bl	8000226 <greenLEDInit>
	 deactivateGreenLED();
 80001f4:	f000 f82c 	bl	8000250 <deactivateGreenLED>
 	 executeButtonPollingRoutine();
 80001f8:	f000 f807 	bl	800020a <executeButtonPollingRoutine>

#if	USE_INTERRUPT_FOR_BUTTON != 0
	 buttonInterruptInit();
 80001fc:	f000 f82f 	bl	800025e <buttonInterruptInit>

#elif USE_INTERRUPT_FOR_BUTTON == 0 //check if it is set to 0
	 buttonInit();
	 addSchedulerEvent(BUTTON_POOL_EVENT);
#endif
	 addSchedulerEvent(LED_DELAY_EVENT);
 8000200:	2002      	movs	r0, #2
 8000202:	f000 fb81 	bl	8000908 <addSchedulerEvent>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}

0800020a <executeButtonPollingRoutine>:



void executeButtonPollingRoutine(){
 800020a:	b580      	push	{r7, lr}
 800020c:	af00      	add	r7, sp, #0
	 if (buttonStatus()){
 800020e:	f000 f847 	bl	80002a0 <buttonStatus>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <executeButtonPollingRoutine+0x14>
		 activateGreenLED();
 8000218:	f000 f813 	bl	8000242 <activateGreenLED>
	 }
	 else{
		 deactivateGreenLED();
	 }
}
 800021c:	e001      	b.n	8000222 <executeButtonPollingRoutine+0x18>
		 deactivateGreenLED();
 800021e:	f000 f817 	bl	8000250 <deactivateGreenLED>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}

08000226 <greenLEDInit>:

void greenLEDInit(){
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
	 LED_Init(GREEN_LED);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fabc 	bl	80007a8 <LED_Init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <toggleGreenLED>:

void redLEDInit(){
	 LED_Init(RED_LED);
}

void toggleGreenLED(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	ToggleLED(GREEN_LED);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fafb 	bl	8000834 <ToggleLED>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}

08000242 <activateGreenLED>:

void toggleRedLED(){
	ToggleLED(RED_LED);
}

void activateGreenLED(){
 8000242:	b580      	push	{r7, lr}
 8000244:	af00      	add	r7, sp, #0
	TurnOnLED(GREEN_LED);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 fb3a 	bl	80008c0 <TurnOnLED>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}

08000250 <deactivateGreenLED>:

void activateRedLED(){
	TurnOnLED(RED_LED);
}

void deactivateGreenLED(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	TurnOffLED(GREEN_LED);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fb0f 	bl	8000878 <TurnOffLED>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}

0800025e <buttonInterruptInit>:

#if USE_INTERRUPT_FOR_BUTTON == 0
	buttonInit();
	executeButtonPollingRoutine();
#elif USE_INTERRUPT_FOR_BUTTON == 1
void buttonInterruptInit(){
 800025e:	b580      	push	{r7, lr}
 8000260:	af00      	add	r7, sp, #0
	button_Init_Interrup_Mode();
 8000262:	f000 f82d 	bl	80002c0 <button_Init_Interrup_Mode>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <EXTI0_IRQHandler>:
#endif


void EXTI0_IRQHandler(){
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
	NVIC_Toggle(EXTI0_IRQ_NUMBER, DISABLE);
 800026e:	2100      	movs	r1, #0
 8000270:	2006      	movs	r0, #6
 8000272:	f000 fa13 	bl	800069c <NVIC_Toggle>
	toggleGreenLED();
 8000276:	f7ff ffdd 	bl	8000234 <toggleGreenLED>
	EXTI_Clear_Pending(BUTTON_PIN);
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fa7e 	bl	800077c <EXTI_Clear_Pending>
	NVIC_Toggle(EXTI0_IRQ_NUMBER, ENABLE);
 8000280:	2101      	movs	r1, #1
 8000282:	2006      	movs	r0, #6
 8000284:	f000 fa0a 	bl	800069c <NVIC_Toggle>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <buttonClock>:

	buttonClock();
	GPIO_Init(GPIOA, &userButton);
}

void buttonClock(){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	GPIO_ClockControl(GPIOA, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	4802      	ldr	r0, [pc, #8]	@ (800029c <buttonClock+0x10>)
 8000294:	f000 f83a 	bl	800030c <GPIO_ClockControl>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40020000 	.word	0x40020000

080002a0 <buttonStatus>:

bool buttonStatus(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

	if (GPIO_ReadFromInputPin(GPIOA, BUTTON_PIN) == BUTTON_PRESSED){
 80002a4:	2100      	movs	r1, #0
 80002a6:	4805      	ldr	r0, [pc, #20]	@ (80002bc <buttonStatus+0x1c>)
 80002a8:	f000 f9d0 	bl	800064c <GPIO_ReadFromInputPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d101      	bne.n	80002b6 <buttonStatus+0x16>
		return true;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e000      	b.n	80002b8 <buttonStatus+0x18>
	}
	else{
		return false;
 80002b6:	2300      	movs	r3, #0
	}
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40020000 	.word	0x40020000

080002c0 <button_Init_Interrup_Mode>:

void button_Init_Interrup_Mode(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t userButton = {0};
 80002c6:	463b      	mov	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	f8c3 2003 	str.w	r2, [r3, #3]

	userButton.PinMode = GPIO_PIN_MODE_INPUT;
 80002d0:	2300      	movs	r3, #0
 80002d2:	707b      	strb	r3, [r7, #1]
	userButton.PinNumber = BUTTON_PIN;
 80002d4:	2300      	movs	r3, #0
 80002d6:	703b      	strb	r3, [r7, #0]
	userButton.PinSpeed = GPIO_PIN_SPEED_LOW;
 80002d8:	2300      	movs	r3, #0
 80002da:	70fb      	strb	r3, [r7, #3]
	userButton.OPType = GPIO_PIN_OPTYPE_PUSH_PULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	70bb      	strb	r3, [r7, #2]
	userButton.PinPuPdControl = GPIO_PIN_OPTYPE_PUSH_PULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	713b      	strb	r3, [r7, #4]
	userButton.InterruptMode = FALLING_RISING_INTERRUPT;
 80002e4:	2303      	movs	r3, #3
 80002e6:	71bb      	strb	r3, [r7, #6]

	buttonClock();
 80002e8:	f7ff ffd0 	bl	800028c <buttonClock>
	GPIO_Init(GPIOA, &userButton);
 80002ec:	463b      	mov	r3, r7
 80002ee:	4619      	mov	r1, r3
 80002f0:	4805      	ldr	r0, [pc, #20]	@ (8000308 <button_Init_Interrup_Mode+0x48>)
 80002f2:	f000 f89b 	bl	800042c <GPIO_Init>
	NVIC_Toggle(EXTI0_IRQ_NUMBER, SET);
 80002f6:	2101      	movs	r1, #1
 80002f8:	2006      	movs	r0, #6
 80002fa:	f000 f9cf 	bl	800069c <NVIC_Toggle>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40020000 	.word	0x40020000

0800030c <GPIO_ClockControl>:
 */

#include "GPIO_Driver.h"

void GPIO_ClockControl(GPIO_RegDef_t *pPinConfig, uint8_t enableDisable)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
    if (enableDisable == ENABLE) {
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d115      	bne.n	800034a <GPIO_ClockControl+0x3e>
        if (pPinConfig == (GPIO_RegDef_t *)GPIOG) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a17      	ldr	r2, [pc, #92]	@ (8000380 <GPIO_ClockControl+0x74>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_ClockControl+0x28>
            AHB1ENR_CLOCK_ENABLE(GPIOG_RCC_OFFSET);  // Enable clock for GPIOG
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <GPIO_ClockControl+0x78>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <GPIO_ClockControl+0x78>)
 800032c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
        }
        else if (pPinConfig == (GPIO_RegDef_t *)GPIOA) {
            AHB1ENR_CLOCK_DISABLE(GPIOA_RCC_OFFSET);  // Disable clock for GPIOA
        }
    }
}
 8000332:	e01f      	b.n	8000374 <GPIO_ClockControl+0x68>
        else if (pPinConfig == (GPIO_RegDef_t *)GPIOA) {
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a14      	ldr	r2, [pc, #80]	@ (8000388 <GPIO_ClockControl+0x7c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d11b      	bne.n	8000374 <GPIO_ClockControl+0x68>
            AHB1ENR_CLOCK_ENABLE(GPIOA_RCC_OFFSET);  // Enable clock for GPIOA
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <GPIO_ClockControl+0x78>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <GPIO_ClockControl+0x78>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	e014      	b.n	8000374 <GPIO_ClockControl+0x68>
        if (pPinConfig == (GPIO_RegDef_t *)GPIOG) {
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a0c      	ldr	r2, [pc, #48]	@ (8000380 <GPIO_ClockControl+0x74>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_ClockControl+0x54>
            AHB1ENR_CLOCK_DISABLE(GPIOG_RCC_OFFSET);  // Disable clock for GPIOG
 8000352:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <GPIO_ClockControl+0x78>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	@ (8000384 <GPIO_ClockControl+0x78>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035e:	e009      	b.n	8000374 <GPIO_ClockControl+0x68>
        else if (pPinConfig == (GPIO_RegDef_t *)GPIOA) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <GPIO_ClockControl+0x7c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <GPIO_ClockControl+0x68>
            AHB1ENR_CLOCK_DISABLE(GPIOA_RCC_OFFSET);  // Disable clock for GPIOA
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <GPIO_ClockControl+0x78>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <GPIO_ClockControl+0x78>)
 800036e:	f023 0301 	bic.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40021800 	.word	0x40021800
 8000384:	40023800 	.word	0x40023800
 8000388:	40020000 	.word	0x40020000

0800038c <GPIO_WriteToOutputPin>:


void GPIO_WriteToOutputPin(GPIO_RegDef_t *pPinConfig, uint8_t pNum, uint8_t pValue){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	70fb      	strb	r3, [r7, #3]
 8000398:	4613      	mov	r3, r2
 800039a:	70bb      	strb	r3, [r7, #2]

	if(pValue == ACTIVE){
 800039c:	78bb      	ldrb	r3, [r7, #2]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d109      	bne.n	80003b6 <GPIO_WriteToOutputPin+0x2a>
		pPinConfig->GPIO_ODR |= (ENABLE << pNum);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	78fa      	ldrb	r2, [r7, #3]
 80003a8:	2101      	movs	r1, #1
 80003aa:	fa01 f202 	lsl.w	r2, r1, r2
 80003ae:	431a      	orrs	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	615a      	str	r2, [r3, #20]
	}
	else if (pValue == DISABLE){
		pPinConfig->GPIO_ODR &= ~(ENABLE << pNum);
	}
}
 80003b4:	e00c      	b.n	80003d0 <GPIO_WriteToOutputPin+0x44>
	else if (pValue == DISABLE){
 80003b6:	78bb      	ldrb	r3, [r7, #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <GPIO_WriteToOutputPin+0x44>
		pPinConfig->GPIO_ODR &= ~(ENABLE << pNum);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	78fa      	ldrb	r2, [r7, #3]
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	401a      	ands	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	615a      	str	r2, [r3, #20]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <GPIO_ToggleOutputPin>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pPinConfig, uint8_t pNum){
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
 80003e2:	460b      	mov	r3, r1
 80003e4:	70fb      	strb	r3, [r7, #3]

	if(pPinConfig->GPIO_ODR & (1 << pNum)){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	78fa      	ldrb	r2, [r7, #3]
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	4013      	ands	r3, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00a      	beq.n	800040e <GPIO_ToggleOutputPin+0x34>
		pPinConfig->GPIO_ODR &= ~(ENABLE << pNum);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	78fa      	ldrb	r2, [r7, #3]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f202 	lsl.w	r2, r1, r2
 8000404:	43d2      	mvns	r2, r2
 8000406:	401a      	ands	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
	}
	else{
		pPinConfig->GPIO_ODR |= (ENABLE << pNum);
	}
}
 800040c:	e008      	b.n	8000420 <GPIO_ToggleOutputPin+0x46>
		pPinConfig->GPIO_ODR |= (ENABLE << pNum);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	78fa      	ldrb	r2, [r7, #3]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	431a      	orrs	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	615a      	str	r2, [r3, #20]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
	...

0800042c <GPIO_Init>:

void GPIO_Init(GPIO_RegDef_t *pGPIOx, GPIO_PinConfig_t *pPinConfig){
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
	temp = (pPinConfig->PinMode << (2 * pPinConfig->PinNumber));
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	461a      	mov	r2, r3
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	61fb      	str	r3, [r7, #28]
	pGPIOx->GPIO_MODER &= ~(0x3 << (2 * pPinConfig->PinNumber)); //0x3 = 0011
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	683a      	ldr	r2, [r7, #0]
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	0052      	lsls	r2, r2, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	601a      	str	r2, [r3, #0]
	pGPIOx->GPIO_MODER |= temp;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	69fb      	ldr	r3, [r7, #28]
 800046a:	431a      	orrs	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	601a      	str	r2, [r3, #0]

	if(pPinConfig->InterruptMode != NO_INTERRUPT){
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	799b      	ldrb	r3, [r3, #6]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d037      	beq.n	80004e8 <GPIO_Init+0xbc>

		if ((pPinConfig->InterruptMode) & FALLING_RISING_INTERRUPT){
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	799b      	ldrb	r3, [r3, #6]
 800047c:	f003 0303 	and.w	r3, r3, #3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d00c      	beq.n	800049e <GPIO_Init+0x72>
			EXTI->EXTI_FTSR |= (1 << EXTI0_IRQ_NUMBER);
 8000484:	4b6e      	ldr	r3, [pc, #440]	@ (8000640 <GPIO_Init+0x214>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a6d      	ldr	r2, [pc, #436]	@ (8000640 <GPIO_Init+0x214>)
 800048a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800048e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1 << EXTI0_IRQ_NUMBER);
 8000490:	4b6b      	ldr	r3, [pc, #428]	@ (8000640 <GPIO_Init+0x214>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a6a      	ldr	r2, [pc, #424]	@ (8000640 <GPIO_Init+0x214>)
 8000496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800049a:	6093      	str	r3, [r2, #8]
 800049c:	e024      	b.n	80004e8 <GPIO_Init+0xbc>
		}
		else if ((pPinConfig->InterruptMode) & FALLING_EDGE_INTERRUPT){
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	799b      	ldrb	r3, [r3, #6]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d00c      	beq.n	80004c4 <GPIO_Init+0x98>
			EXTI->EXTI_FTSR |= (1 << EXTI0_IRQ_NUMBER);
 80004aa:	4b65      	ldr	r3, [pc, #404]	@ (8000640 <GPIO_Init+0x214>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	4a64      	ldr	r2, [pc, #400]	@ (8000640 <GPIO_Init+0x214>)
 80004b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004b4:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << EXTI0_IRQ_NUMBER);
 80004b6:	4b62      	ldr	r3, [pc, #392]	@ (8000640 <GPIO_Init+0x214>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4a61      	ldr	r2, [pc, #388]	@ (8000640 <GPIO_Init+0x214>)
 80004bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004c0:	6093      	str	r3, [r2, #8]
 80004c2:	e011      	b.n	80004e8 <GPIO_Init+0xbc>
		}

		else if((pPinConfig->InterruptMode) & RISING_EDGE_INTERRUPT){
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	799b      	ldrb	r3, [r3, #6]
 80004c8:	f003 0302 	and.w	r3, r3, #2
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00b      	beq.n	80004e8 <GPIO_Init+0xbc>
			EXTI->EXTI_RTSR |= (1 << EXTI0_IRQ_NUMBER);
 80004d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000640 <GPIO_Init+0x214>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4a5a      	ldr	r2, [pc, #360]	@ (8000640 <GPIO_Init+0x214>)
 80004d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004da:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << EXTI0_IRQ_NUMBER);
 80004dc:	4b58      	ldr	r3, [pc, #352]	@ (8000640 <GPIO_Init+0x214>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a57      	ldr	r2, [pc, #348]	@ (8000640 <GPIO_Init+0x214>)
 80004e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004e6:	60d3      	str	r3, [r2, #12]
		}
	}

	pGPIOx->GPIO_OSPEEDR &= ~(0x3 << (2 * pPinConfig->PinNumber)); //0x3 = 0011
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	2103      	movs	r1, #3
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	43d2      	mvns	r2, r2
 80004fa:	401a      	ands	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	609a      	str	r2, [r3, #8]
	pGPIOx->GPIO_OSPEEDR |= temp;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	689a      	ldr	r2, [r3, #8]
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	431a      	orrs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	609a      	str	r2, [r3, #8]

	pGPIOx->GPIO_PUPDR &= ~(0x3 << (2 * pPinConfig->PinNumber)); //0x3 = 0011
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	683a      	ldr	r2, [r7, #0]
 8000512:	7812      	ldrb	r2, [r2, #0]
 8000514:	0052      	lsls	r2, r2, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	401a      	ands	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	60da      	str	r2, [r3, #12]
	pGPIOx->GPIO_PUPDR |= temp;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	431a      	orrs	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]

	pGPIOx->GPIO_OTYPER &= ~(0x1 << (pPinConfig->PinNumber)); //0x3 = 0011
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	43d2      	mvns	r2, r2
 8000540:	401a      	ands	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	605a      	str	r2, [r3, #4]
	pGPIOx->GPIO_OTYPER |= temp;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	605a      	str	r2, [r3, #4]

	if(pGPIOx->GPIO_MODER == GPIO_PIN_MODE_AFM){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d12b      	bne.n	80005b2 <GPIO_Init+0x186>
		uint32_t highOrlow = (pPinConfig->PinNumber/8);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	61bb      	str	r3, [r7, #24]
		uint32_t highOrLowBitField 	= (pPinConfig->PinNumber% 8);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	617b      	str	r3, [r7, #20]
		uint32_t temp = (4 * highOrLowBitField);
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	613b      	str	r3, [r7, #16]

		pGPIOx->GPIO_AFRL_AFRH[highOrlow] &= ~(0xF << (4 * highOrLowBitField));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	69ba      	ldr	r2, [r7, #24]
 8000578:	3208      	adds	r2, #8
 800057a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	210f      	movs	r1, #15
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	43d2      	mvns	r2, r2
 800058a:	ea03 0102 	and.w	r1, r3, r2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	69ba      	ldr	r2, [r7, #24]
 8000592:	3208      	adds	r2, #8
 8000594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOx->GPIO_AFRL_AFRH[highOrlow] |= temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	69ba      	ldr	r2, [r7, #24]
 800059c:	3208      	adds	r2, #8
 800059e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	ea42 0103 	orr.w	r1, r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	3208      	adds	r2, #8
 80005ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	uint8_t tempRegister = (pPinConfig->PinNumber / 4);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	089b      	lsrs	r3, r3, #2
 80005b8:	73fb      	strb	r3, [r7, #15]
	uint8_t tempBitField = ((pPinConfig->PinNumber % 4));
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f003 0303 	and.w	r3, r3, #3
 80005c2:	73bb      	strb	r3, [r7, #14]
	uint16_t tempPortCode = getPortNumb(pGPIOx);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f857 	bl	8000678 <getPortNumb>
 80005ca:	4603      	mov	r3, r0
 80005cc:	81bb      	strh	r3, [r7, #12]
	RCC_SYSCFG_ENABLE(14);
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <GPIO_Init+0x218>)
 80005d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000644 <GPIO_Init+0x218>)
 80005d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d8:	6453      	str	r3, [r2, #68]	@ 0x44


	SYSCFG->SYSCFG_EXTICR[tempRegister] &= ~(0xF << (tempBitField * 4));
 80005da:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <GPIO_Init+0x21c>)
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3302      	adds	r3, #2
 80005e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	210f      	movs	r1, #15
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	4915      	ldr	r1, [pc, #84]	@ (8000648 <GPIO_Init+0x21c>)
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4002      	ands	r2, r0
 80005f8:	3302      	adds	r3, #2
 80005fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->SYSCFG_EXTICR[tempRegister] |= (tempPortCode << (tempBitField * 4));
 80005fe:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <GPIO_Init+0x21c>)
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3302      	adds	r3, #2
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	89b9      	ldrh	r1, [r7, #12]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	4618      	mov	r0, r3
 8000614:	490c      	ldr	r1, [pc, #48]	@ (8000648 <GPIO_Init+0x21c>)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4302      	orrs	r2, r0
 800061a:	3302      	adds	r3, #2
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	EXTI->EXTI_IMR |= (1 << pPinConfig->PinNumber);
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <GPIO_Init+0x214>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	4611      	mov	r1, r2
 800062a:	2201      	movs	r2, #1
 800062c:	408a      	lsls	r2, r1
 800062e:	4611      	mov	r1, r2
 8000630:	4a03      	ldr	r2, [pc, #12]	@ (8000640 <GPIO_Init+0x214>)
 8000632:	430b      	orrs	r3, r1
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40013c00 	.word	0x40013c00
 8000644:	40023800 	.word	0x40023800
 8000648:	40013800 	.word	0x40013800

0800064c <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pPinConfig, uint8_t pNum){
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	temp = ((pPinConfig->GPIO_IDR >> pNum ) & 0x01);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	691a      	ldr	r2, [r3, #16]
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	fa22 f303 	lsr.w	r3, r2, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
	return temp;
 800066a:	7bfb      	ldrb	r3, [r7, #15]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
	...

08000678 <getPortNumb>:

uint16_t getPortNumb(GPIO_RegDef_t *pPinConfig){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	if (pPinConfig == GPIOA){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <getPortNumb+0x20>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d101      	bne.n	800068c <getPortNumb+0x14>
	return GPIOA_PORT;
 8000688:	2300      	movs	r3, #0
 800068a:	e000      	b.n	800068e <getPortNumb+0x16>
	}
	return 0;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40020000 	.word	0x40020000

0800069c <NVIC_Toggle>:

void NVIC_Toggle(uint8_t irq_Num, uint8_t toggle_Control){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	if(toggle_Control){
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <NVIC_Toggle+0x20>
		IRQ_Enable(irq_Num);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f809 	bl	80006cc <IRQ_Enable>
	}
	else{
		IRQ_Disable(irq_Num);
	}
}
 80006ba:	e003      	b.n	80006c4 <NVIC_Toggle+0x28>
		IRQ_Disable(irq_Num);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f830 	bl	8000724 <IRQ_Disable>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <IRQ_Enable>:
 *  Created on: Sep 30, 2024
 *      Author: joelrsilva
 */
#include "InterruptControl.h"

void IRQ_Enable(uint8_t irq_Numb){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    if (irq_Numb < 32) {
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b1f      	cmp	r3, #31
 80006da:	d80a      	bhi.n	80006f2 <IRQ_Enable+0x26>
        *NVIC_ISER0 |= (1 << irq_Numb);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <IRQ_Enable+0x50>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <IRQ_Enable+0x50>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
    }
    else if (irq_Numb < 64){
        *NVIC_ISER1 |= (1 << (irq_Numb % 32));
    }
}
 80006f0:	e00e      	b.n	8000710 <IRQ_Enable+0x44>
    else if (irq_Numb < 64){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80006f6:	d80b      	bhi.n	8000710 <IRQ_Enable+0x44>
        *NVIC_ISER1 |= (1 << (irq_Numb % 32));
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <IRQ_Enable+0x54>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	f002 021f 	and.w	r2, r2, #31
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a05      	ldr	r2, [pc, #20]	@ (8000720 <IRQ_Enable+0x54>)
 800070c:	430b      	orrs	r3, r1
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000e104 	.word	0xe000e104

08000724 <IRQ_Disable>:

void IRQ_Disable(uint8_t irq_Numb){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
    if (irq_Numb < 32) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b1f      	cmp	r3, #31
 8000732:	d80a      	bhi.n	800074a <IRQ_Disable+0x26>
        *NVIC_ICER0 |= (1 << irq_Numb);
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <IRQ_Disable+0x50>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <IRQ_Disable+0x50>)
 8000744:	430b      	orrs	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
    }
    else if (irq_Numb < 64){
        *NVIC_ICER1 |= (1 << (irq_Numb % 32));
    }
}
 8000748:	e00e      	b.n	8000768 <IRQ_Disable+0x44>
    else if (irq_Numb < 64){
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b3f      	cmp	r3, #63	@ 0x3f
 800074e:	d80b      	bhi.n	8000768 <IRQ_Disable+0x44>
        *NVIC_ICER1 |= (1 << (irq_Numb % 32));
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <IRQ_Disable+0x54>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	f002 021f 	and.w	r2, r2, #31
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <IRQ_Disable+0x54>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e180 	.word	0xe000e180
 8000778:	e000e184 	.word	0xe000e184

0800077c <EXTI_Clear_Pending>:
    else if (irq_Numb < 64){
        *NVIC_ISPR1 |= (1 << (irq_Numb % 32));
    }
}

void EXTI_Clear_Pending(uint8_t pinNum){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    EXTI->EXTI_PR |= (1 << pinNum);  // Acknowledge and clear the EXTI pending interrupt
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <EXTI_Clear_Pending+0x28>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	2101      	movs	r1, #1
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a03      	ldr	r2, [pc, #12]	@ (80007a4 <EXTI_Clear_Pending+0x28>)
 8000796:	430b      	orrs	r3, r1
 8000798:	6153      	str	r3, [r2, #20]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40013c00 	.word	0x40013c00

080007a8 <LED_Init>:
#include "LED_Driver.h"

GPIO_PinConfig_t redLed;
GPIO_PinConfig_t greenLed;

void LED_Init(uint8_t ledNum){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]

	switch(ledNum){
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <LED_Init+0x16>
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d018      	beq.n	80007ee <LED_Init+0x46>

	GPIO_ClockControl(GPIOG, ENABLE);
	GPIO_Init(GPIOG, &greenLed);
	break;
	}
}
 80007bc:	e02f      	b.n	800081e <LED_Init+0x76>
	redLed.PinMode = GPIO_PIN_MODE_GP;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <LED_Init+0x80>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	705a      	strb	r2, [r3, #1]
	redLed.PinNumber = GPIO_PIN_NUM_14;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <LED_Init+0x80>)
 80007c6:	220e      	movs	r2, #14
 80007c8:	701a      	strb	r2, [r3, #0]
	redLed.PinSpeed = GPIO_PIN_SPEED_HIGH;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <LED_Init+0x80>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	70da      	strb	r2, [r3, #3]
	redLed.OPType = GPIO_PIN_OPTYPE_PUSH_PULL;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <LED_Init+0x80>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	709a      	strb	r2, [r3, #2]
	redLed.PinPuPdControl = GPIO_PIN_OPTYPE_PUSH_PULL;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <LED_Init+0x80>)
 80007d8:	2200      	movs	r2, #0
 80007da:	711a      	strb	r2, [r3, #4]
	GPIO_ClockControl(GPIOG, ENABLE);
 80007dc:	2101      	movs	r1, #1
 80007de:	4813      	ldr	r0, [pc, #76]	@ (800082c <LED_Init+0x84>)
 80007e0:	f7ff fd94 	bl	800030c <GPIO_ClockControl>
	GPIO_Init(GPIOG, &redLed);
 80007e4:	4910      	ldr	r1, [pc, #64]	@ (8000828 <LED_Init+0x80>)
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <LED_Init+0x84>)
 80007e8:	f7ff fe20 	bl	800042c <GPIO_Init>
	break;
 80007ec:	e017      	b.n	800081e <LED_Init+0x76>
	greenLed.PinMode = GPIO_PIN_MODE_GP;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <LED_Init+0x88>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	705a      	strb	r2, [r3, #1]
	greenLed.PinNumber = GPIO_PIN_NUM_13;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <LED_Init+0x88>)
 80007f6:	220d      	movs	r2, #13
 80007f8:	701a      	strb	r2, [r3, #0]
	greenLed.PinSpeed = GPIO_PIN_SPEED_HIGH;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <LED_Init+0x88>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	70da      	strb	r2, [r3, #3]
	greenLed.OPType = GPIO_PIN_OPTYPE_PUSH_PULL;
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <LED_Init+0x88>)
 8000802:	2200      	movs	r2, #0
 8000804:	709a      	strb	r2, [r3, #2]
	greenLed.PinPuPdControl = GPIO_PIN_OPTYPE_PUSH_PULL;
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <LED_Init+0x88>)
 8000808:	2200      	movs	r2, #0
 800080a:	711a      	strb	r2, [r3, #4]
	GPIO_ClockControl(GPIOG, ENABLE);
 800080c:	2101      	movs	r1, #1
 800080e:	4807      	ldr	r0, [pc, #28]	@ (800082c <LED_Init+0x84>)
 8000810:	f7ff fd7c 	bl	800030c <GPIO_ClockControl>
	GPIO_Init(GPIOG, &greenLed);
 8000814:	4906      	ldr	r1, [pc, #24]	@ (8000830 <LED_Init+0x88>)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <LED_Init+0x84>)
 8000818:	f7ff fe08 	bl	800042c <GPIO_Init>
	break;
 800081c:	bf00      	nop
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000001c 	.word	0x2000001c
 800082c:	40021800 	.word	0x40021800
 8000830:	20000024 	.word	0x20000024

08000834 <ToggleLED>:

void ToggleLED(uint8_t ledNum){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]

	switch(ledNum){
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <ToggleLED+0x16>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d006      	beq.n	8000856 <ToggleLED+0x22>
		GPIO_ToggleOutputPin(GPIOG, redLed.PinNumber);

	case GREEN_LED:
		GPIO_ToggleOutputPin(GPIOG, greenLed.PinNumber);
	}
}
 8000848:	e00b      	b.n	8000862 <ToggleLED+0x2e>
		GPIO_ToggleOutputPin(GPIOG, redLed.PinNumber);
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <ToggleLED+0x38>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	@ (8000870 <ToggleLED+0x3c>)
 8000852:	f7ff fdc2 	bl	80003da <GPIO_ToggleOutputPin>
		GPIO_ToggleOutputPin(GPIOG, greenLed.PinNumber);
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <ToggleLED+0x40>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <ToggleLED+0x3c>)
 800085e:	f7ff fdbc 	bl	80003da <GPIO_ToggleOutputPin>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000001c 	.word	0x2000001c
 8000870:	40021800 	.word	0x40021800
 8000874:	20000024 	.word	0x20000024

08000878 <TurnOffLED>:

void TurnOffLED(uint8_t ledNum){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]

	switch(ledNum){
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <TurnOffLED+0x16>
 8000888:	2b01      	cmp	r3, #1
 800088a:	d007      	beq.n	800089c <TurnOffLED+0x24>
		GPIO_WriteToOutputPin(GPIOG, redLed.PinNumber, DISABLE);

	case GREEN_LED:
		GPIO_WriteToOutputPin(GPIOG, greenLed.PinNumber, DISABLE);
	}
}
 800088c:	e00d      	b.n	80008aa <TurnOffLED+0x32>
		GPIO_WriteToOutputPin(GPIOG, redLed.PinNumber, DISABLE);
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <TurnOffLED+0x3c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <TurnOffLED+0x40>)
 8000898:	f7ff fd78 	bl	800038c <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOG, greenLed.PinNumber, DISABLE);
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <TurnOffLED+0x44>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <TurnOffLED+0x40>)
 80008a6:	f7ff fd71 	bl	800038c <GPIO_WriteToOutputPin>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000001c 	.word	0x2000001c
 80008b8:	40021800 	.word	0x40021800
 80008bc:	20000024 	.word	0x20000024

080008c0 <TurnOnLED>:

void TurnOnLED(uint8_t ledNum){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]

	switch(ledNum){
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <TurnOnLED+0x16>
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d007      	beq.n	80008e4 <TurnOnLED+0x24>
		GPIO_WriteToOutputPin(GPIOG, redLed.PinNumber, ENABLE);

	case GREEN_LED:
		GPIO_WriteToOutputPin(GPIOG, greenLed.PinNumber, ENABLE);
	}
}
 80008d4:	e00d      	b.n	80008f2 <TurnOnLED+0x32>
		GPIO_WriteToOutputPin(GPIOG, redLed.PinNumber, ENABLE);
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <TurnOnLED+0x3c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	4619      	mov	r1, r3
 80008de:	4808      	ldr	r0, [pc, #32]	@ (8000900 <TurnOnLED+0x40>)
 80008e0:	f7ff fd54 	bl	800038c <GPIO_WriteToOutputPin>
		GPIO_WriteToOutputPin(GPIOG, greenLed.PinNumber, ENABLE);
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <TurnOnLED+0x44>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2201      	movs	r2, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <TurnOnLED+0x40>)
 80008ee:	f7ff fd4d 	bl	800038c <GPIO_WriteToOutputPin>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000001c 	.word	0x2000001c
 8000900:	40021800 	.word	0x40021800
 8000904:	20000024 	.word	0x20000024

08000908 <addSchedulerEvent>:
#include "Scheduler.h"


static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t eventToSchedule){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= eventToSchedule;
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <addSchedulerEvent+0x20>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4313      	orrs	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	@ (8000928 <addSchedulerEvent+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	2000002c 	.word	0x2000002c

0800092c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	applicationInit();
 8000930:	f7ff fc5c 	bl	80001ec <applicationInit>


#if !USE_INTERRUPT_FOR_BUTTON
	EXTI0_IRQHandler
#else
		executeButtonPollingRoutine();
 8000934:	f7ff fc69 	bl	800020a <executeButtonPollingRoutine>
 8000938:	e7fc      	b.n	8000934 <main+0x8>
	...

0800093c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800093c:	480d      	ldr	r0, [pc, #52]	@ (8000974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000940:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <LoopForever+0x6>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	@ (800097c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <LoopForever+0xe>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	@ (8000988 <LoopForever+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800096a:	f000 f811 	bl	8000990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096e:	f7ff ffdd 	bl	800092c <main>

08000972 <LoopForever>:

LoopForever:
  b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   r0, =_estack
 8000974:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000980:	080009f8 	.word	0x080009f8
  ldr r2, =_sbss
 8000984:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000988:	20000030 	.word	0x20000030

0800098c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC_IRQHandler>
	...

08000990 <__libc_init_array>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	4d0d      	ldr	r5, [pc, #52]	@ (80009c8 <__libc_init_array+0x38>)
 8000994:	4c0d      	ldr	r4, [pc, #52]	@ (80009cc <__libc_init_array+0x3c>)
 8000996:	1b64      	subs	r4, r4, r5
 8000998:	10a4      	asrs	r4, r4, #2
 800099a:	2600      	movs	r6, #0
 800099c:	42a6      	cmp	r6, r4
 800099e:	d109      	bne.n	80009b4 <__libc_init_array+0x24>
 80009a0:	4d0b      	ldr	r5, [pc, #44]	@ (80009d0 <__libc_init_array+0x40>)
 80009a2:	4c0c      	ldr	r4, [pc, #48]	@ (80009d4 <__libc_init_array+0x44>)
 80009a4:	f000 f818 	bl	80009d8 <_init>
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	10a4      	asrs	r4, r4, #2
 80009ac:	2600      	movs	r6, #0
 80009ae:	42a6      	cmp	r6, r4
 80009b0:	d105      	bne.n	80009be <__libc_init_array+0x2e>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b8:	4798      	blx	r3
 80009ba:	3601      	adds	r6, #1
 80009bc:	e7ee      	b.n	800099c <__libc_init_array+0xc>
 80009be:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c2:	4798      	blx	r3
 80009c4:	3601      	adds	r6, #1
 80009c6:	e7f2      	b.n	80009ae <__libc_init_array+0x1e>
 80009c8:	080009f0 	.word	0x080009f0
 80009cc:	080009f0 	.word	0x080009f0
 80009d0:	080009f0 	.word	0x080009f0
 80009d4:	080009f4 	.word	0x080009f4

080009d8 <_init>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	bf00      	nop
 80009dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009de:	bc08      	pop	{r3}
 80009e0:	469e      	mov	lr, r3
 80009e2:	4770      	bx	lr

080009e4 <_fini>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr
