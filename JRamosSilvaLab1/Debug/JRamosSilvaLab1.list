
JRamosSilvaLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000013d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000013d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013d4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002a9  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000193  00000000  00000000  000016a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00001840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000057  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001001  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000008b6  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d5d  00000000  00000000  000031d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006f33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000012c  00000000  00000000  00006f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003b4 	.word	0x080003b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003b4 	.word	0x080003b4

080001ec <appDelay>:
#define GPIOG_MODER_OFFSET 			28
#define LED_ODR_BIT 				14

#define	FIRST_NAME_LENGTH			4

void appDelay(uint32_t delay){
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	char firstName[FIRST_NAME_LENGTH] = {'j','o','e','l'};
 80001f4:	4b13      	ldr	r3, [pc, #76]	@ (8000244 <appDelay+0x58>)
 80001f6:	60fb      	str	r3, [r7, #12]
	[[maybe_unused]] char destinationArray[FIRST_NAME_LENGTH] = {};
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < delay; i++){
 80001fc:	2300      	movs	r3, #0
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	e016      	b.n	8000230 <appDelay+0x44>
		for (int j = 0; j < FIRST_NAME_LENGTH; j++){
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
 8000206:	e00d      	b.n	8000224 <appDelay+0x38>
			destinationArray[j] = firstName[j];
 8000208:	f107 020c 	add.w	r2, r7, #12
 800020c:	693b      	ldr	r3, [r7, #16]
 800020e:	4413      	add	r3, r2
 8000210:	7819      	ldrb	r1, [r3, #0]
 8000212:	f107 0208 	add.w	r2, r7, #8
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	4413      	add	r3, r2
 800021a:	460a      	mov	r2, r1
 800021c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < FIRST_NAME_LENGTH; j++){
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	3301      	adds	r3, #1
 8000222:	613b      	str	r3, [r7, #16]
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	2b03      	cmp	r3, #3
 8000228:	ddee      	ble.n	8000208 <appDelay+0x1c>
	for (int i = 0; i < delay; i++){
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	3301      	adds	r3, #1
 800022e:	617b      	str	r3, [r7, #20]
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	429a      	cmp	r2, r3
 8000236:	d8e4      	bhi.n	8000202 <appDelay+0x16>
		}
	}
}
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	371c      	adds	r7, #28
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	6c656f6a 	.word	0x6c656f6a

08000248 <enablePeripheralsAndClocks>:

void enablePeripheralsAndClocks(){
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
	uint32_t *clkPtr = (uint32_t*) GPIOG_RCC_ENABLE_ADDRESS;
 800024e:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <enablePeripheralsAndClocks+0x3c>)
 8000250:	607b      	str	r3, [r7, #4]
	uint32_t *modePtr = (uint32_t*) GPIOG_MODER;
 8000252:	4b0d      	ldr	r3, [pc, #52]	@ (8000288 <enablePeripheralsAndClocks+0x40>)
 8000254:	603b      	str	r3, [r7, #0]
	*clkPtr |= (1 << 6);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	*modePtr &= ~(0x3 << GPIOG_MODER_OFFSET);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	601a      	str	r2, [r3, #0]
	*modePtr |= (0x1 << GPIOG_MODER_OFFSET);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40023830 	.word	0x40023830
 8000288:	40021800 	.word	0x40021800

0800028c <turnOnRedLED>:

void turnOnRedLED(){
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
	uint32_t *odrPtr = (uint32_t*) GPIOG_ODR;
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <turnOnRedLED+0x20>)
 8000294:	607b      	str	r3, [r7, #4]
	*odrPtr |= (1 << LED_ODR_BIT);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40021814 	.word	0x40021814

080002b0 <turnOffRedLED>:

void turnOffRedLED(){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
	uint32_t *odrPtr = (uint32_t*) GPIOG_ODR;
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <turnOffRedLED+0x20>)
 80002b8:	607b      	str	r3, [r7, #4]
	*odrPtr &= ~(1 << LED_ODR_BIT);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021814 	.word	0x40021814

080002d4 <toggleRedLED>:

void toggleRedLED(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	uint32_t *gpiogOdrPtr = (uint32_t*) GPIOG_ODR;
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <toggleRedLED+0x28>)
 80002dc:	607b      	str	r3, [r7, #4]
	if ((*gpiogOdrPtr & (1 << LED_ODR_BIT)) != 0){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d002      	beq.n	80002f0 <toggleRedLED+0x1c>
		turnOffRedLED();
 80002ea:	f7ff ffe1 	bl	80002b0 <turnOffRedLED>
	}
	else
		turnOnRedLED();
}
 80002ee:	e001      	b.n	80002f4 <toggleRedLED+0x20>
		turnOnRedLED();
 80002f0:	f7ff ffcc 	bl	800028c <turnOnRedLED>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021814 	.word	0x40021814

08000300 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	enablePeripheralsAndClocks();
 8000304:	f7ff ffa0 	bl	8000248 <enablePeripheralsAndClocks>
    /* Loop forever */
	for(;;){
	appDelay(DEFAULT_DELAY);
 8000308:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 800030c:	f7ff ff6e 	bl	80001ec <appDelay>
	toggleRedLED();
 8000310:	f7ff ffe0 	bl	80002d4 <toggleRedLED>
	appDelay(DEFAULT_DELAY);
 8000314:	bf00      	nop
 8000316:	e7f7      	b.n	8000308 <main+0x8>

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	@ (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	@ (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffd9 	bl	8000300 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	@ (80003a4 <__libc_init_array+0x38>)
 8000370:	4c0d      	ldr	r4, [pc, #52]	@ (80003a8 <__libc_init_array+0x3c>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	2600      	movs	r6, #0
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	@ (80003ac <__libc_init_array+0x40>)
 800037e:	4c0c      	ldr	r4, [pc, #48]	@ (80003b0 <__libc_init_array+0x44>)
 8000380:	f000 f818 	bl	80003b4 <_init>
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	2600      	movs	r6, #0
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
