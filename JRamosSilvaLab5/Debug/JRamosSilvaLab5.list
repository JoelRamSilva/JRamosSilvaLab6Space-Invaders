
JRamosSilvaLab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003918  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003ac8  08003ac8  00004ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb0  08003bb0  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bb0  08003bb0  00004bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb8  08003bb8  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bbc  08003bbc  00004bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003bc0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          0000027c  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075fc  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a37  00000000  00000000  0000c69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0000e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b8  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c55  00000000  00000000  0000ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a183  00000000  00000000  00032ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2603  00000000  00000000  0003cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f24b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002814  00000000  00000000  0010f290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00111aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ab0 	.word	0x08003ab0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003ab0 	.word	0x08003ab0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
 *      Author: joelrsilva
 */

#include "ApplicationCode.h"

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
//	 greenLEDInit();
//	 deactivateGreenLED();
// 	 executeButtonPollingRoutine();

#if	USE_INTERRUPT_FOR_BUTTON
	 buttonInterruptInit();
 8000594:	f000 f82e 	bl	80005f4 <buttonInterruptInit>

#elif USE_INTERRUPT_FOR_BUTTON == 0 //check if it is set to 0
	 buttonInit();
	 addSchedulerEvent(BUTTON_POOL_EVENT);
#endif
	 addSchedulerEvent(LED_DELAY_EVENT);
 8000598:	2002      	movs	r0, #2
 800059a:	f000 fa0d 	bl	80009b8 <addSchedulerEvent>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <Application_InitGyro>:
			nameDestination[j] = firstName[j];
		}
	}
}

void Application_InitGyro() {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
    Gyro_Init();
 80005a6:	f000 f8b3 	bl	8000710 <Gyro_Init>
    Gyro_PowerOn();
 80005aa:	f000 f967 	bl	800087c <Gyro_PowerOn>
    Gyro_RegisterConfigure();
 80005ae:	f000 f9bd 	bl	800092c <Gyro_RegisterConfigure>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <Application_PrintGyroDeviceID>:


void Application_PrintGyroDeviceID() {
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
    Gyro_DeviceIDPrint();
 80005ba:	f000 f929 	bl	8000810 <Gyro_DeviceIDPrint>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <Application_PrintGyroTemperature>:


void Application_PrintGyroTemperature() {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
    Gyro_TemperaturePrint();
 80005c6:	f000 f975 	bl	80008b4 <Gyro_TemperaturePrint>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}

080005ce <EXTI0_IRQHandler>:
}



//--------------------VERIFY THE CODE-----------
void EXTI0_IRQHandler() {
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005d2:	2006      	movs	r0, #6
 80005d4:	f000 fda5 	bl	8001122 <HAL_NVIC_DisableIRQ>
    addSchedulerEvent(DEVICE_ID_AND_TEMP_EVENT);
 80005d8:	2002      	movs	r0, #2
 80005da:	f000 f9ed 	bl	80009b8 <addSchedulerEvent>
    EXTI_Clear_Pending(BUTTON_PIN);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 f9da 	bl	8000998 <EXTI_Clear_Pending>
    HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80005e4:	2006      	movs	r0, #6
 80005e6:	f000 fdb6 	bl	8001156 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005ea:	2006      	movs	r0, #6
 80005ec:	f000 fd8b 	bl	8001106 <HAL_NVIC_EnableIRQ>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <buttonInterruptInit>:
#if USE_INTERRUPT_FOR_BUTTON == 0
void buttonInit(){
	executeButtonPollingRoutine();
}
#elif USE_INTERRUPT_FOR_BUTTON == 1
void buttonInterruptInit(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	button_Init_Interrup_Mode();
 80005f8:	f000 f81c 	bl	8000634 <button_Init_Interrup_Mode>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <buttonClock>:
	GPIO_InitButton.Pull = GPIO_MODE_OUTPUT_PP;

	HAL_GPIO_Init(GPIOA, &GPIO_InitButton);
}

void buttonClock(){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <buttonClock+0x30>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <buttonClock+0x30>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <buttonClock+0x30>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <button_Init_Interrup_Mode>:
	else{
		return false;
	}
}

void button_Init_Interrup_Mode(){
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitInterruptButton = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
	buttonClock();
 8000648:	f7ff ffda 	bl	8000600 <buttonClock>

	GPIO_InitInterruptButton.Mode = GPIO_MODE_IT_RISING_FALLING;
 800064c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000650:	60bb      	str	r3, [r7, #8]
	GPIO_InitInterruptButton.Pin = GPIO_PIN_0;
 8000652:	2301      	movs	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
	GPIO_InitInterruptButton.Speed = GPIO_SPEED_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
	GPIO_InitInterruptButton.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &GPIO_InitInterruptButton);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4619      	mov	r1, r3
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <button_Init_Interrup_Mode+0x44>)
 8000664:	f000 fd86 	bl	8001174 <HAL_GPIO_Init>
    //HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);  // make it a priority
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);          // enable interrupt
 8000668:	2006      	movs	r0, #6
 800066a:	f000 fd4c 	bl	8001106 <HAL_NVIC_EnableIRQ>
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40020000 	.word	0x40020000

0800067c <APPLICATION_ASSERT>:
 *      Author: joelrsilva
 */

#include "ErrorHandling.h"

void APPLICATION_ASSERT(bool value){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	if (!value) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <APPLICATION_ASSERT+0x1a>
	    while (true) {
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <APPLICATION_ASSERT+0x16>
	    }
	}
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <Gyro_WriteRegister>:
// External SPI handle and static HAL status
extern SPI_HandleTypeDef hspi5;
static HAL_StatusTypeDef gyro_hal_status = HAL_OK;

// Helper function to write to a register
static void Gyro_WriteRegister(uint8_t registerAddress, uint8_t value) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {registerAddress & 0x7F, value};  // MSB is 0 for write
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	733b      	strb	r3, [r7, #12]
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	737b      	strb	r3, [r7, #13]
    Gyro_EnableSlaveCommunication();
 80006c2:	f000 f951 	bl	8000968 <Gyro_EnableSlaveCommunication>
    gyro_hal_status = HAL_SPI_Transmit(&hspi5, data, 2, HAL_MAX_DELAY);
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ce:	2202      	movs	r2, #2
 80006d0:	480d      	ldr	r0, [pc, #52]	@ (8000708 <Gyro_WriteRegister+0x64>)
 80006d2:	f001 fc02 	bl	8001eda <HAL_SPI_Transmit>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <Gyro_WriteRegister+0x68>)
 80006dc:	701a      	strb	r2, [r3, #0]
    Gyro_DisableSlaveCommunication();
 80006de:	f000 f94f 	bl	8000980 <Gyro_DisableSlaveCommunication>

    if (gyro_hal_status != HAL_OK) {
 80006e2:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <Gyro_WriteRegister+0x68>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d009      	beq.n	80006fe <Gyro_WriteRegister+0x5a>
        APPLICATION_ASSERT(gyro_hal_status == HAL_OK);
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <Gyro_WriteRegister+0x68>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bf0c      	ite	eq
 80006f2:	2301      	moveq	r3, #1
 80006f4:	2300      	movne	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffbf 	bl	800067c <APPLICATION_ASSERT>
    }
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000094 	.word	0x20000094
 800070c:	2000008c 	.word	0x2000008c

08000710 <Gyro_Init>:

void Gyro_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Init;

    // Enable clocks for GPIO ports
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <Gyro_Init+0xe8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a36      	ldr	r2, [pc, #216]	@ (80007f8 <Gyro_Init+0xe8>)
 8000720:	f043 0320 	orr.w	r3, r3, #32
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b34      	ldr	r3, [pc, #208]	@ (80007f8 <Gyro_Init+0xe8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0320 	and.w	r3, r3, #32
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <Gyro_Init+0xe8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a2f      	ldr	r2, [pc, #188]	@ (80007f8 <Gyro_Init+0xe8>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <Gyro_Init+0xe8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

	GPIO_Init.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800074e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
	GPIO_Init.Alternate = GPIO_AF5_SPI5;
 8000760:	2305      	movs	r3, #5
 8000762:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4824      	ldr	r0, [pc, #144]	@ (80007fc <Gyro_Init+0xec>)
 800076c:	f000 fd02 	bl	8001174 <HAL_GPIO_Init>

	GPIO_Init.Pin = GPIO_PIN_1;
 8000770:	2302      	movs	r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode = GPIO_MODE_OUTPUT_OD;
 8000774:	2311      	movs	r3, #17
 8000776:	613b      	str	r3, [r7, #16]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	481e      	ldr	r0, [pc, #120]	@ (8000800 <Gyro_Init+0xf0>)
 8000788:	f000 fcf4 	bl	8001174 <HAL_GPIO_Init>

    // SPI configuration
	hspi5.Instance = SPI5;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <Gyro_Init+0xf4>)
 800078e:	4a1e      	ldr	r2, [pc, #120]	@ (8000808 <Gyro_Init+0xf8>)
 8000790:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <Gyro_Init+0xf4>)
 8000794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000798:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <Gyro_Init+0xf4>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <Gyro_Init+0xf4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <Gyro_Init+0xf4>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Gyro_Init+0xf4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <Gyro_Init+0xf4>)
 80007b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b8:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Gyro_Init+0xf4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <Gyro_Init+0xf4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <Gyro_Init+0xf4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <Gyro_Init+0xf4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 0;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Gyro_Init+0xf4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Initialize SPI and verify
    Gyro_DisableSlaveCommunication();
 80007d8:	f000 f8d2 	bl	8000980 <Gyro_DisableSlaveCommunication>
    gyro_hal_status = HAL_SPI_Init(&hspi5);
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <Gyro_Init+0xf4>)
 80007de:	f001 faf3 	bl	8001dc8 <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <Gyro_Init+0xfc>)
 80007e8:	701a      	strb	r2, [r3, #0]
    Gyro_HALStatus();
 80007ea:	f000 f8a9 	bl	8000940 <Gyro_HALStatus>
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021400 	.word	0x40021400
 8000800:	40020800 	.word	0x40020800
 8000804:	20000094 	.word	0x20000094
 8000808:	40015000 	.word	0x40015000
 800080c:	2000008c 	.word	0x2000008c

08000810 <Gyro_DeviceIDPrint>:

void Gyro_DeviceIDPrint(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
    uint16_t receivedWord = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	80bb      	strh	r3, [r7, #4]
    uint8_t addressByte = WHO_AM_I | 0x80; // readuing it
 800081a:	238f      	movs	r3, #143	@ 0x8f
 800081c:	70fb      	strb	r3, [r7, #3]

    Gyro_EnableSlaveCommunication();
 800081e:	f000 f8a3 	bl	8000968 <Gyro_EnableSlaveCommunication>
    gyro_hal_status = HAL_SPI_TransmitReceive(&hspi5, &addressByte, (uint8_t *)&receivedWord, 2, HAL_MAX_DELAY);
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	1cf9      	adds	r1, r7, #3
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	480f      	ldr	r0, [pc, #60]	@ (800086c <Gyro_DeviceIDPrint+0x5c>)
 8000830:	f001 fc97 	bl	8002162 <HAL_SPI_TransmitReceive>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <Gyro_DeviceIDPrint+0x60>)
 800083a:	701a      	strb	r2, [r3, #0]
    Gyro_DisableSlaveCommunication();
 800083c:	f000 f8a0 	bl	8000980 <Gyro_DisableSlaveCommunication>

    if (gyro_hal_status == HAL_OK) {
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <Gyro_DeviceIDPrint+0x60>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d109      	bne.n	800085c <Gyro_DeviceIDPrint+0x4c>
        uint8_t deviceID = (receivedWord >> 8) & 0xFF;
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	71fb      	strb	r3, [r7, #7]
        printf("Gyro Device ID: 0x%02X\n", deviceID);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4619      	mov	r1, r3
 8000854:	4807      	ldr	r0, [pc, #28]	@ (8000874 <Gyro_DeviceIDPrint+0x64>)
 8000856:	f002 fa61 	bl	8002d1c <iprintf>
    } else {
        printf("Failed to read Device ID.\n");
    }
}
 800085a:	e002      	b.n	8000862 <Gyro_DeviceIDPrint+0x52>
        printf("Failed to read Device ID.\n");
 800085c:	4806      	ldr	r0, [pc, #24]	@ (8000878 <Gyro_DeviceIDPrint+0x68>)
 800085e:	f002 fac5 	bl	8002dec <puts>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000094 	.word	0x20000094
 8000870:	2000008c 	.word	0x2000008c
 8000874:	08003ac8 	.word	0x08003ac8
 8000878:	08003ae0 	.word	0x08003ae0

0800087c <Gyro_PowerOn>:

void Gyro_PowerOn(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
    uint8_t ctrl_reg1_value = 0x0F;
 8000882:	230f      	movs	r3, #15
 8000884:	71fb      	strb	r3, [r7, #7]
    Gyro_WriteRegister(CTRL_REG1, ctrl_reg1_value);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4619      	mov	r1, r3
 800088a:	2020      	movs	r0, #32
 800088c:	f7ff ff0a 	bl	80006a4 <Gyro_WriteRegister>
    Gyro_HALStatus();
 8000890:	f000 f856 	bl	8000940 <Gyro_HALStatus>
    APPLICATION_ASSERT(gyro_hal_status == HAL_OK);
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <Gyro_PowerOn+0x34>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	bf0c      	ite	eq
 800089c:	2301      	moveq	r3, #1
 800089e:	2300      	movne	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff feea 	bl	800067c <APPLICATION_ASSERT>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <Gyro_TemperaturePrint>:

void Gyro_TemperaturePrint(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af02      	add	r7, sp, #8
    uint16_t receivedTemp = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	80bb      	strh	r3, [r7, #4]
    uint8_t addressByte = OUT_TEMP | 0x80;
 80008be:	23a6      	movs	r3, #166	@ 0xa6
 80008c0:	70fb      	strb	r3, [r7, #3]

    Gyro_EnableSlaveCommunication();
 80008c2:	f000 f851 	bl	8000968 <Gyro_EnableSlaveCommunication>
    gyro_hal_status = HAL_SPI_TransmitReceive(&hspi5, &addressByte, (uint8_t *)&receivedTemp, 2, HAL_MAX_DELAY);
 80008c6:	1d3a      	adds	r2, r7, #4
 80008c8:	1cf9      	adds	r1, r7, #3
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2302      	movs	r3, #2
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <Gyro_TemperaturePrint+0x68>)
 80008d4:	f001 fc45 	bl	8002162 <HAL_SPI_TransmitReceive>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <Gyro_TemperaturePrint+0x6c>)
 80008de:	701a      	strb	r2, [r3, #0]
    Gyro_DisableSlaveCommunication();
 80008e0:	f000 f84e 	bl	8000980 <Gyro_DisableSlaveCommunication>

    if (gyro_hal_status == HAL_OK) {
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <Gyro_TemperaturePrint+0x6c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10f      	bne.n	800090c <Gyro_TemperaturePrint+0x58>
        int8_t temperatureData = (uint8_t)((receivedTemp >> 8) & 0xFF);
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	71fb      	strb	r3, [r7, #7]
        int8_t temperature = (40 - temperatureData);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	71bb      	strb	r3, [r7, #6]
        printf("Gyro Temperature: %d°C\n", temperature);
 80008fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <Gyro_TemperaturePrint+0x70>)
 8000906:	f002 fa09 	bl	8002d1c <iprintf>
    } else {
        printf("Failed to read temperature.\n");
    }
}
 800090a:	e002      	b.n	8000912 <Gyro_TemperaturePrint+0x5e>
        printf("Failed to read temperature.\n");
 800090c:	4806      	ldr	r0, [pc, #24]	@ (8000928 <Gyro_TemperaturePrint+0x74>)
 800090e:	f002 fa6d 	bl	8002dec <puts>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000094 	.word	0x20000094
 8000920:	2000008c 	.word	0x2000008c
 8000924:	08003afc 	.word	0x08003afc
 8000928:	08003b18 	.word	0x08003b18

0800092c <Gyro_RegisterConfigure>:

void Gyro_RegisterConfigure(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    Gyro_PowerOn();
 8000930:	f7ff ffa4 	bl	800087c <Gyro_PowerOn>
    Gyro_WriteRegister(CTRL_REG5, 0x80);
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	2024      	movs	r0, #36	@ 0x24
 8000938:	f7ff feb4 	bl	80006a4 <Gyro_WriteRegister>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <Gyro_HALStatus>:
    printf("OUT_X: %d\n", out_x);


}

void Gyro_HALStatus(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    if (gyro_hal_status != HAL_OK) {
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <Gyro_HALStatus+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <Gyro_HALStatus+0x1c>
        printf("HAL Error: %d\n", gyro_hal_status);
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <Gyro_HALStatus+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	@ (8000964 <Gyro_HALStatus+0x24>)
 8000954:	f002 f9e2 	bl	8002d1c <iprintf>
        while (1) {
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Gyro_HALStatus+0x18>
        	//infinite loop for error
        }
    }
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000008c 	.word	0x2000008c
 8000964:	08003b40 	.word	0x08003b40

08000968 <Gyro_EnableSlaveCommunication>:

void Gyro_EnableSlaveCommunication(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NCS_MEMS_SPI_PORT, NCS_MEMS_SPI_PIN, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2102      	movs	r1, #2
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <Gyro_EnableSlaveCommunication+0x14>)
 8000972:	f000 fdab 	bl	80014cc <HAL_GPIO_WritePin>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40020800 	.word	0x40020800

08000980 <Gyro_DisableSlaveCommunication>:

void Gyro_DisableSlaveCommunication(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NCS_MEMS_SPI_PORT, NCS_MEMS_SPI_PIN, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2102      	movs	r1, #2
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <Gyro_DisableSlaveCommunication+0x14>)
 800098a:	f000 fd9f 	bl	80014cc <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40020800 	.word	0x40020800

08000998 <EXTI_Clear_Pending>:

void IRQ_Set_Pending(uint8_t irq_Numb){
	HAL_NVIC_SetPendingIRQ(irq_Numb);
}

void EXTI_Clear_Pending(uint8_t pinNum){
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	__HAL_GPIO_EXTI_CLEAR_IT(pinNum);
 80009a2:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <EXTI_Clear_Pending+0x1c>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	6153      	str	r3, [r2, #20]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40013c00 	.word	0x40013c00

080009b8 <addSchedulerEvent>:
#include "Scheduler.h"


static uint32_t scheduledEvents;

void addSchedulerEvent(uint32_t eventToSchedule){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	scheduledEvents |= eventToSchedule;
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <addSchedulerEvent+0x20>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	@ (80009d8 <addSchedulerEvent+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000090 	.word	0x20000090

080009dc <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t eventToRemove){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(eventToRemove);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	43da      	mvns	r2, r3
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <removeSchedulerEvent+0x24>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4013      	ands	r3, r2
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <removeSchedulerEvent+0x24>)
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000090 	.word	0x20000090

08000a04 <getScheduledEvents>:

uint32_t getScheduledEvents(){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <getScheduledEvents+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000090 	.word	0x20000090

08000a1c <main>:
//static void MX_GPIO_Init(void);
//static void MX_SPI5_Init(void);
/* -------------------------------------------- */

int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  HAL_Init();
 8000a22:	f000 f9a1 	bl	8000d68 <HAL_Init>
  initialise_monitor_handles();
 8000a26:	f002 f839 	bl	8002a9c <initialise_monitor_handles>
  SystemClock_Config();
 8000a2a:	f000 f819 	bl	8000a60 <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_SPI5_Init();

  applicationInit();
 8000a2e:	f7ff fdaf 	bl	8000590 <applicationInit>
  Application_InitGyro();
 8000a32:	f7ff fdb6 	bl	80005a2 <Application_InitGyro>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t events = getScheduledEvents();
 8000a36:	f7ff ffe5 	bl	8000a04 <getScheduledEvents>
 8000a3a:	6078      	str	r0, [r7, #4]

      if ((events & DEVICE_ID_AND_TEMP_EVENT) == DEVICE_ID_AND_TEMP_EVENT) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <main+0x3a>
          Application_PrintGyroDeviceID();
 8000a46:	f7ff fdb6 	bl	80005b6 <Application_PrintGyroDeviceID>
          Application_PrintGyroTemperature();
 8000a4a:	f7ff fdba 	bl	80005c2 <Application_PrintGyroTemperature>
          removeSchedulerEvent(DEVICE_ID_AND_TEMP_EVENT);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff ffc4 	bl	80009dc <removeSchedulerEvent>
 8000a54:	e7ef      	b.n	8000a36 <main+0x1a>
      }else{
    	  HAL_Delay(100);
 8000a56:	2064      	movs	r0, #100	@ 0x64
 8000a58:	f000 f9f8 	bl	8000e4c <HAL_Delay>
  {
 8000a5c:	e7eb      	b.n	8000a36 <main+0x1a>
	...

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	@ 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	@ 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 f9c4 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <SystemClock_Config+0xd0>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aac:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ad8:	2332      	movs	r3, #50	@ 0x32
 8000ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fd09 	bl	8001500 <HAL_RCC_OscConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000af4:	f000 f820 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af8:	230f      	movs	r3, #15
 8000afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b04:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 ff6a 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b22:	f000 f809 	bl	8000b38 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3750      	adds	r7, #80	@ 0x50
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fa98 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <HAL_SPI_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	@ (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_SPI_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000bee:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c00:	2305      	movs	r3, #5
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <HAL_SPI_MspInit+0x8c>)
 8000c0c:	f000 fab2 	bl	8001174 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40015000 	.word	0x40015000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40021400 	.word	0x40021400

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 f8c7 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f002 f8aa 	bl	8002e0c <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20030000 	.word	0x20030000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200000ec 	.word	0x200000ec
 8000cec:	200002f0 	.word	0x200002f0

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d18:	f7ff ffea 	bl	8000cf0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	@ (8000d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	@ (8000d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f002 f869 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fe69 	bl	8000a1c <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d58:	08003bc0 	.word	0x08003bc0
  ldr r2, =_sbss
 8000d5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d60:	200002ec 	.word	0x200002ec

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f991 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fed2 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f9b7 	bl	800113e <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de8:	f000 f971 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200000f0 	.word	0x200000f0

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200000f0 	.word	0x200000f0

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	@ (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db12      	blt.n	8000f6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	490a      	ldr	r1, [pc, #40]	@ (8000f78 <__NVIC_DisableIRQ+0x44>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	3320      	adds	r3, #32
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
}
 8000f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f66:	f3bf 8f6f 	isb	sy
}
 8000f6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0c      	blt.n	8000fa8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	@ (8000fb4 <__NVIC_ClearPendingIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	3360      	adds	r3, #96	@ 0x60
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fee7 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff fefc 	bl	8000edc <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff feef 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff feff 	bl	8000f34 <__NVIC_DisableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff94 	bl	8001074 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff09 	bl	8000f7c <__NVIC_ClearPendingIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e177      	b.n	8001480 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f040 8166 	bne.w	800147a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b03      	cmp	r3, #3
 8001232:	d017      	beq.n	8001264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80c0 	beq.w	800147a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <HAL_GPIO_Init+0x324>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a65      	ldr	r2, [pc, #404]	@ (8001498 <HAL_GPIO_Init+0x324>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b63      	ldr	r3, [pc, #396]	@ (8001498 <HAL_GPIO_Init+0x324>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	4a61      	ldr	r2, [pc, #388]	@ (800149c <HAL_GPIO_Init+0x328>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <HAL_GPIO_Init+0x32c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d037      	beq.n	80013b2 <HAL_GPIO_Init+0x23e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a57      	ldr	r2, [pc, #348]	@ (80014a4 <HAL_GPIO_Init+0x330>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d031      	beq.n	80013ae <HAL_GPIO_Init+0x23a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a56      	ldr	r2, [pc, #344]	@ (80014a8 <HAL_GPIO_Init+0x334>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d02b      	beq.n	80013aa <HAL_GPIO_Init+0x236>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a55      	ldr	r2, [pc, #340]	@ (80014ac <HAL_GPIO_Init+0x338>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x232>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a54      	ldr	r2, [pc, #336]	@ (80014b0 <HAL_GPIO_Init+0x33c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x22e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a53      	ldr	r2, [pc, #332]	@ (80014b4 <HAL_GPIO_Init+0x340>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x22a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a52      	ldr	r2, [pc, #328]	@ (80014b8 <HAL_GPIO_Init+0x344>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x226>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a51      	ldr	r2, [pc, #324]	@ (80014bc <HAL_GPIO_Init+0x348>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x222>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a50      	ldr	r2, [pc, #320]	@ (80014c0 <HAL_GPIO_Init+0x34c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x21e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4f      	ldr	r2, [pc, #316]	@ (80014c4 <HAL_GPIO_Init+0x350>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x21a>
 800138a:	2309      	movs	r3, #9
 800138c:	e012      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 800138e:	230a      	movs	r3, #10
 8001390:	e010      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 8001392:	2308      	movs	r3, #8
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 8001396:	2307      	movs	r3, #7
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x240>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	@ (800149c <HAL_GPIO_Init+0x328>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a34      	ldr	r2, [pc, #208]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b32      	ldr	r3, [pc, #200]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a29      	ldr	r2, [pc, #164]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144a:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001450:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001474:	4a14      	ldr	r2, [pc, #80]	@ (80014c8 <HAL_GPIO_Init+0x354>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae84 	bls.w	8001190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	@ 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40021c00 	.word	0x40021c00
 80014c0:	40022000 	.word	0x40022000
 80014c4:	40022400 	.word	0x40022400
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e267      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d075      	beq.n	800160a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800151e:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d00c      	beq.n	8001544 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152a:	4b85      	ldr	r3, [pc, #532]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001532:	2b08      	cmp	r3, #8
 8001534:	d112      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001536:	4b82      	ldr	r3, [pc, #520]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b7e      	ldr	r3, [pc, #504]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d05b      	beq.n	8001608 <HAL_RCC_OscConfig+0x108>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d157      	bne.n	8001608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e242      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x74>
 8001566:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b70      	ldr	r3, [pc, #448]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6f      	ldr	r2, [pc, #444]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6c      	ldr	r2, [pc, #432]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001598:	4b69      	ldr	r3, [pc, #420]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a68      	ldr	r2, [pc, #416]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a65      	ldr	r2, [pc, #404]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc3c 	bl	8000e34 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fc38 	bl	8000e34 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e207      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc28 	bl	8000e34 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fc24 	bl	8000e34 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1f3      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0xe8>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001616:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800162a:	2b08      	cmp	r3, #8
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e1c7      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4937      	ldr	r1, [pc, #220]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e03a      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_RCC_OscConfig+0x244>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fbdd 	bl	8000e34 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fbd9 	bl	8000e34 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1a8      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4925      	ldr	r1, [pc, #148]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_OscConfig+0x244>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbbc 	bl	8000e34 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fbb8 	bl	8000e34 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e187      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d036      	beq.n	8001758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_RCC_OscConfig+0x248>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fb9c 	bl	8000e34 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fb98 	bl	8000e34 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e167      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x200>
 800171e:	e01b      	b.n	8001758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_RCC_OscConfig+0x248>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff fb85 	bl	8000e34 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	e00e      	b.n	800174c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fb81 	bl	8000e34 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d907      	bls.n	800174c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e150      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	42470000 	.word	0x42470000
 8001748:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ea      	bne.n	800172e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8097 	beq.w	8001894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b81      	ldr	r3, [pc, #516]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a7c      	ldr	r2, [pc, #496]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b7a      	ldr	r3, [pc, #488]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001792:	2301      	movs	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b77      	ldr	r3, [pc, #476]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b74      	ldr	r3, [pc, #464]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a73      	ldr	r2, [pc, #460]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fb41 	bl	8000e34 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b6:	f7ff fb3d 	bl	8000e34 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e10c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x2ea>
 80017dc:	4b64      	ldr	r3, [pc, #400]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	4a63      	ldr	r2, [pc, #396]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e8:	e01c      	b.n	8001824 <HAL_RCC_OscConfig+0x324>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x30c>
 80017f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x324>
 800180c:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001810:	4a57      	ldr	r2, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	@ 0x70
 8001818:	4b55      	ldr	r3, [pc, #340]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a54      	ldr	r2, [pc, #336]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d015      	beq.n	8001858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fb02 	bl	8000e34 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fafe 	bl	8000e34 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0cb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ee      	beq.n	8001834 <HAL_RCC_OscConfig+0x334>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff faec 	bl	8000e34 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fae8 	bl	8000e34 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0b5      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	4b3e      	ldr	r3, [pc, #248]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ee      	bne.n	8001860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a38      	ldr	r2, [pc, #224]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a1 	beq.w	80019e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189e:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d05c      	beq.n	8001964 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d141      	bne.n	8001936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fabc 	bl	8000e34 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fab8 	bl	8000e34 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e087      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fa91 	bl	8000e34 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fa8d 	bl	8000e34 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e05c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x416>
 8001934:	e054      	b.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fa7a 	bl	8000e34 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa76 	bl	8000e34 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e045      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
 8001962:	e03d      	b.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e038      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000
 8001978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x4ec>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d028      	beq.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d121      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d11a      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d111      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	3b01      	subs	r3, #1
 80019c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cc      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d90c      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d044      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b3f      	ldr	r3, [pc, #252]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e067      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4934      	ldr	r1, [pc, #208]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f9a8 	bl	8000e34 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f9a4 	bl	8000e34 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e04f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d20c      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f908 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08003b50 	.word	0x08003b50
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b094      	sub	sp, #80	@ 0x50
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd4:	4b79      	ldr	r3, [pc, #484]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d00d      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	f200 80e1 	bhi.w	8001da8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bee:	e0db      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bf4:	e0db      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b73      	ldr	r3, [pc, #460]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bfa:	e0d8      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b6d      	ldr	r3, [pc, #436]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b6a      	ldr	r3, [pc, #424]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c2e:	4622      	mov	r2, r4
 8001c30:	462b      	mov	r3, r5
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0159      	lsls	r1, r3, #5
 8001c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c40:	0150      	lsls	r0, r2, #5
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4621      	mov	r1, r4
 8001c48:	1a51      	subs	r1, r2, r1
 8001c4a:	6139      	str	r1, [r7, #16]
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c60:	4659      	mov	r1, fp
 8001c62:	018b      	lsls	r3, r1, #6
 8001c64:	4651      	mov	r1, sl
 8001c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	018a      	lsls	r2, r1, #6
 8001c6e:	4651      	mov	r1, sl
 8001c70:	ebb2 0801 	subs.w	r8, r2, r1
 8001c74:	4659      	mov	r1, fp
 8001c76:	eb63 0901 	sbc.w	r9, r3, r1
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c8e:	4690      	mov	r8, r2
 8001c90:	4699      	mov	r9, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	eb18 0303 	adds.w	r3, r8, r3
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	462b      	mov	r3, r5
 8001c9c:	eb49 0303 	adc.w	r3, r9, r3
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	024b      	lsls	r3, r1, #9
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb8:	4621      	mov	r1, r4
 8001cba:	024a      	lsls	r2, r1, #9
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ccc:	f7fe fae8 	bl	80002a0 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cd8:	e058      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cf4:	4642      	mov	r2, r8
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0159      	lsls	r1, r3, #5
 8001d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d06:	0150      	lsls	r0, r2, #5
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d30:	eb63 050b 	sbc.w	r5, r3, fp
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	00eb      	lsls	r3, r5, #3
 8001d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d42:	00e2      	lsls	r2, r4, #3
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	4643      	mov	r3, r8
 8001d4a:	18e3      	adds	r3, r4, r3
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	464b      	mov	r3, r9
 8001d50:	eb45 0303 	adc.w	r3, r5, r3
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d62:	4629      	mov	r1, r5
 8001d64:	028b      	lsls	r3, r1, #10
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	028a      	lsls	r2, r1, #10
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d76:	2200      	movs	r2, #0
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	61fa      	str	r2, [r7, #28]
 8001d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d80:	f7fe fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	3301      	adds	r3, #1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001daa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3750      	adds	r7, #80	@ 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	00f42400 	.word	0x00f42400
 8001dc4:	007a1200 	.word	0x007a1200

08001dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07b      	b.n	8001ed2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d108      	bne.n	8001df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001dea:	d009      	beq.n	8001e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
 8001df2:	e005      	b.n	8001e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe feba 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e84:	ea42 0103 	orr.w	r1, r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	f003 0104 	and.w	r1, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	f003 0210 	and.w	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b088      	sub	sp, #32
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eea:	f7fe ffa3 	bl	8000e34 <HAL_GetTick>
 8001eee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e12a      	b.n	800215a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_SPI_Transmit+0x36>
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e122      	b.n	800215a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_SPI_Transmit+0x48>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e11b      	b.n	800215a <HAL_SPI_Transmit+0x280>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f70:	d10f      	bne.n	8001f92 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9c:	2b40      	cmp	r3, #64	@ 0x40
 8001f9e:	d007      	beq.n	8001fb0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fb8:	d152      	bne.n	8002060 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_Transmit+0xee>
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d145      	bne.n	8002054 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	881a      	ldrh	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	1c9a      	adds	r2, r3, #2
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fec:	e032      	b.n	8002054 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d112      	bne.n	8002022 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002020:	e018      	b.n	8002054 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002022:	f7fe ff07 	bl	8000e34 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d803      	bhi.n	800203a <HAL_SPI_Transmit+0x160>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002038:	d102      	bne.n	8002040 <HAL_SPI_Transmit+0x166>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e082      	b.n	800215a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1c7      	bne.n	8001fee <HAL_SPI_Transmit+0x114>
 800205e:	e053      	b.n	8002108 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_SPI_Transmit+0x194>
 8002068:	8b7b      	ldrh	r3, [r7, #26]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d147      	bne.n	80020fe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002094:	e033      	b.n	80020fe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d113      	bne.n	80020cc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	330c      	adds	r3, #12
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020ca:	e018      	b.n	80020fe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020cc:	f7fe feb2 	bl	8000e34 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d803      	bhi.n	80020e4 <HAL_SPI_Transmit+0x20a>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020e2:	d102      	bne.n	80020ea <HAL_SPI_Transmit+0x210>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e02d      	b.n	800215a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1c6      	bne.n	8002096 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	6839      	ldr	r1, [r7, #0]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fa59 	bl	80025c4 <SPI_EndRxTxTransaction>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002158:	2300      	movs	r3, #0
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	@ 0x28
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002170:	2301      	movs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002174:	f7fe fe5e 	bl	8000e34 <HAL_GetTick>
 8002178:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002180:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800218c:	7ffb      	ldrb	r3, [r7, #31]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d00c      	beq.n	80021ac <HAL_SPI_TransmitReceive+0x4a>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002198:	d106      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x46>
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d001      	beq.n	80021ac <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
 80021aa:	e17f      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_SPI_TransmitReceive+0x5c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_SPI_TransmitReceive+0x5c>
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e174      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x6e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e16d      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d003      	beq.n	80021ec <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2205      	movs	r2, #5
 80021e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222c:	2b40      	cmp	r3, #64	@ 0x40
 800222e:	d007      	beq.n	8002240 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800223e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002248:	d17e      	bne.n	8002348 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_SPI_TransmitReceive+0xf6>
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d16c      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	881a      	ldrh	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	1c9a      	adds	r2, r3, #2
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800227c:	e059      	b.n	8002332 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b02      	cmp	r3, #2
 800228a:	d11b      	bne.n	80022c4 <HAL_SPI_TransmitReceive+0x162>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <HAL_SPI_TransmitReceive+0x162>
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	2b01      	cmp	r3, #1
 800229a:	d113      	bne.n	80022c4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	881a      	ldrh	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	1c9a      	adds	r2, r3, #2
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d119      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x1a4>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d014      	beq.n	8002306 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	b292      	uxth	r2, r2
 80022e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002302:	2301      	movs	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002306:	f7fe fd95 	bl	8000e34 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002312:	429a      	cmp	r2, r3
 8002314:	d80d      	bhi.n	8002332 <HAL_SPI_TransmitReceive+0x1d0>
 8002316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800231c:	d009      	beq.n	8002332 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0bc      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1a0      	bne.n	800227e <HAL_SPI_TransmitReceive+0x11c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d19b      	bne.n	800227e <HAL_SPI_TransmitReceive+0x11c>
 8002346:	e082      	b.n	800244e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x1f4>
 8002350:	8afb      	ldrh	r3, [r7, #22]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d171      	bne.n	800243a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800237c:	e05d      	b.n	800243a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b02      	cmp	r3, #2
 800238a:	d11c      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x264>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <HAL_SPI_TransmitReceive+0x264>
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	2b01      	cmp	r3, #1
 800239a:	d114      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d119      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x2a6>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d014      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002404:	2301      	movs	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002408:	f7fe fd14 	bl	8000e34 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002414:	429a      	cmp	r2, r3
 8002416:	d803      	bhi.n	8002420 <HAL_SPI_TransmitReceive+0x2be>
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800241e:	d102      	bne.n	8002426 <HAL_SPI_TransmitReceive+0x2c4>
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e038      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d19c      	bne.n	800237e <HAL_SPI_TransmitReceive+0x21c>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d197      	bne.n	800237e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800244e:	6a3a      	ldr	r2, [r7, #32]
 8002450:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f8b6 	bl	80025c4 <SPI_EndRxTxTransaction>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e01d      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024aa:	2300      	movs	r3, #0
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3728      	adds	r7, #40	@ 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024c4:	f7fe fcb6 	bl	8000e34 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024d4:	f7fe fcae 	bl	8000e34 <HAL_GetTick>
 80024d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024da:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	0d1b      	lsrs	r3, r3, #20
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ea:	e054      	b.n	8002596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f2:	d050      	beq.n	8002596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024f4:	f7fe fc9e 	bl	8000e34 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	429a      	cmp	r2, r3
 8002502:	d902      	bls.n	800250a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d13d      	bne.n	8002586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002522:	d111      	bne.n	8002548 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800252c:	d004      	beq.n	8002538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002536:	d107      	bne.n	8002548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002550:	d10f      	bne.n	8002572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e017      	b.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3b01      	subs	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d19b      	bne.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2201      	movs	r2, #1
 80025d8:	2102      	movs	r1, #2
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff6a 	bl	80024b4 <SPI_WaitFlagStateUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e032      	b.n	800265c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <SPI_EndRxTxTransaction+0xa0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <SPI_EndRxTxTransaction+0xa4>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0d5b      	lsrs	r3, r3, #21
 8002602:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002614:	d112      	bne.n	800263c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	2180      	movs	r1, #128	@ 0x80
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff ff47 	bl	80024b4 <SPI_WaitFlagStateUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d016      	beq.n	800265a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e00f      	b.n	800265c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3b01      	subs	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002652:	2b80      	cmp	r3, #128	@ 0x80
 8002654:	d0f2      	beq.n	800263c <SPI_EndRxTxTransaction+0x78>
 8002656:	e000      	b.n	800265a <SPI_EndRxTxTransaction+0x96>
        break;
 8002658:	bf00      	nop
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000000 	.word	0x20000000
 8002668:	165e9f81 	.word	0x165e9f81

0800266c <findslot>:
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <findslot+0x2c>)
 800266e:	b510      	push	{r4, lr}
 8002670:	4604      	mov	r4, r0
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	b118      	cbz	r0, 800267e <findslot+0x12>
 8002676:	6a03      	ldr	r3, [r0, #32]
 8002678:	b90b      	cbnz	r3, 800267e <findslot+0x12>
 800267a:	f000 fb19 	bl	8002cb0 <__sinit>
 800267e:	2c13      	cmp	r4, #19
 8002680:	d807      	bhi.n	8002692 <findslot+0x26>
 8002682:	4806      	ldr	r0, [pc, #24]	@ (800269c <findslot+0x30>)
 8002684:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002688:	3201      	adds	r2, #1
 800268a:	d002      	beq.n	8002692 <findslot+0x26>
 800268c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002690:	bd10      	pop	{r4, pc}
 8002692:	2000      	movs	r0, #0
 8002694:	e7fc      	b.n	8002690 <findslot+0x24>
 8002696:	bf00      	nop
 8002698:	20000020 	.word	0x20000020
 800269c:	20000100 	.word	0x20000100

080026a0 <error>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	4604      	mov	r4, r0
 80026a4:	f000 fbb2 	bl	8002e0c <__errno>
 80026a8:	2613      	movs	r6, #19
 80026aa:	4605      	mov	r5, r0
 80026ac:	2700      	movs	r7, #0
 80026ae:	4630      	mov	r0, r6
 80026b0:	4639      	mov	r1, r7
 80026b2:	beab      	bkpt	0x00ab
 80026b4:	4606      	mov	r6, r0
 80026b6:	602e      	str	r6, [r5, #0]
 80026b8:	4620      	mov	r0, r4
 80026ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026bc <checkerror>:
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d101      	bne.n	80026c4 <checkerror+0x8>
 80026c0:	f7ff bfee 	b.w	80026a0 <error>
 80026c4:	4770      	bx	lr

080026c6 <_swiread>:
 80026c6:	b530      	push	{r4, r5, lr}
 80026c8:	b085      	sub	sp, #20
 80026ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80026ce:	9203      	str	r2, [sp, #12]
 80026d0:	2406      	movs	r4, #6
 80026d2:	ad01      	add	r5, sp, #4
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	beab      	bkpt	0x00ab
 80026da:	4604      	mov	r4, r0
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ffed 	bl	80026bc <checkerror>
 80026e2:	b005      	add	sp, #20
 80026e4:	bd30      	pop	{r4, r5, pc}

080026e6 <_read>:
 80026e6:	b570      	push	{r4, r5, r6, lr}
 80026e8:	460e      	mov	r6, r1
 80026ea:	4614      	mov	r4, r2
 80026ec:	f7ff ffbe 	bl	800266c <findslot>
 80026f0:	4605      	mov	r5, r0
 80026f2:	b930      	cbnz	r0, 8002702 <_read+0x1c>
 80026f4:	f000 fb8a 	bl	8002e0c <__errno>
 80026f8:	2309      	movs	r3, #9
 80026fa:	6003      	str	r3, [r0, #0]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002700:	bd70      	pop	{r4, r5, r6, pc}
 8002702:	6800      	ldr	r0, [r0, #0]
 8002704:	4622      	mov	r2, r4
 8002706:	4631      	mov	r1, r6
 8002708:	f7ff ffdd 	bl	80026c6 <_swiread>
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d0f5      	beq.n	80026fc <_read+0x16>
 8002710:	686b      	ldr	r3, [r5, #4]
 8002712:	1a20      	subs	r0, r4, r0
 8002714:	4403      	add	r3, r0
 8002716:	606b      	str	r3, [r5, #4]
 8002718:	e7f2      	b.n	8002700 <_read+0x1a>

0800271a <_swilseek>:
 800271a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800271c:	460c      	mov	r4, r1
 800271e:	4616      	mov	r6, r2
 8002720:	f7ff ffa4 	bl	800266c <findslot>
 8002724:	4605      	mov	r5, r0
 8002726:	b940      	cbnz	r0, 800273a <_swilseek+0x20>
 8002728:	f000 fb70 	bl	8002e0c <__errno>
 800272c:	2309      	movs	r3, #9
 800272e:	6003      	str	r3, [r0, #0]
 8002730:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002734:	4620      	mov	r0, r4
 8002736:	b003      	add	sp, #12
 8002738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273a:	2e02      	cmp	r6, #2
 800273c:	d903      	bls.n	8002746 <_swilseek+0x2c>
 800273e:	f000 fb65 	bl	8002e0c <__errno>
 8002742:	2316      	movs	r3, #22
 8002744:	e7f3      	b.n	800272e <_swilseek+0x14>
 8002746:	2e01      	cmp	r6, #1
 8002748:	d112      	bne.n	8002770 <_swilseek+0x56>
 800274a:	6843      	ldr	r3, [r0, #4]
 800274c:	18e4      	adds	r4, r4, r3
 800274e:	d4f6      	bmi.n	800273e <_swilseek+0x24>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	260a      	movs	r6, #10
 8002754:	e9cd 3400 	strd	r3, r4, [sp]
 8002758:	466f      	mov	r7, sp
 800275a:	4630      	mov	r0, r6
 800275c:	4639      	mov	r1, r7
 800275e:	beab      	bkpt	0x00ab
 8002760:	4606      	mov	r6, r0
 8002762:	4630      	mov	r0, r6
 8002764:	f7ff ffaa 	bl	80026bc <checkerror>
 8002768:	2800      	cmp	r0, #0
 800276a:	dbe1      	blt.n	8002730 <_swilseek+0x16>
 800276c:	606c      	str	r4, [r5, #4]
 800276e:	e7e1      	b.n	8002734 <_swilseek+0x1a>
 8002770:	2e02      	cmp	r6, #2
 8002772:	6803      	ldr	r3, [r0, #0]
 8002774:	d1ec      	bne.n	8002750 <_swilseek+0x36>
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	260c      	movs	r6, #12
 800277a:	466f      	mov	r7, sp
 800277c:	4630      	mov	r0, r6
 800277e:	4639      	mov	r1, r7
 8002780:	beab      	bkpt	0x00ab
 8002782:	4606      	mov	r6, r0
 8002784:	4630      	mov	r0, r6
 8002786:	f7ff ff99 	bl	80026bc <checkerror>
 800278a:	1c43      	adds	r3, r0, #1
 800278c:	d0d0      	beq.n	8002730 <_swilseek+0x16>
 800278e:	4404      	add	r4, r0
 8002790:	e7de      	b.n	8002750 <_swilseek+0x36>

08002792 <_lseek>:
 8002792:	f7ff bfc2 	b.w	800271a <_swilseek>

08002796 <_swiwrite>:
 8002796:	b530      	push	{r4, r5, lr}
 8002798:	b085      	sub	sp, #20
 800279a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800279e:	9203      	str	r2, [sp, #12]
 80027a0:	2405      	movs	r4, #5
 80027a2:	ad01      	add	r5, sp, #4
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	beab      	bkpt	0x00ab
 80027aa:	4604      	mov	r4, r0
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff85 	bl	80026bc <checkerror>
 80027b2:	b005      	add	sp, #20
 80027b4:	bd30      	pop	{r4, r5, pc}

080027b6 <_write>:
 80027b6:	b570      	push	{r4, r5, r6, lr}
 80027b8:	460e      	mov	r6, r1
 80027ba:	4615      	mov	r5, r2
 80027bc:	f7ff ff56 	bl	800266c <findslot>
 80027c0:	4604      	mov	r4, r0
 80027c2:	b930      	cbnz	r0, 80027d2 <_write+0x1c>
 80027c4:	f000 fb22 	bl	8002e0c <__errno>
 80027c8:	2309      	movs	r3, #9
 80027ca:	6003      	str	r3, [r0, #0]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027d0:	bd70      	pop	{r4, r5, r6, pc}
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	462a      	mov	r2, r5
 80027d6:	4631      	mov	r1, r6
 80027d8:	f7ff ffdd 	bl	8002796 <_swiwrite>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	dbf5      	blt.n	80027cc <_write+0x16>
 80027e0:	6862      	ldr	r2, [r4, #4]
 80027e2:	1ae8      	subs	r0, r5, r3
 80027e4:	4402      	add	r2, r0
 80027e6:	42ab      	cmp	r3, r5
 80027e8:	6062      	str	r2, [r4, #4]
 80027ea:	d1f1      	bne.n	80027d0 <_write+0x1a>
 80027ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff bf55 	b.w	80026a0 <error>

080027f6 <_swiclose>:
 80027f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027f8:	2402      	movs	r4, #2
 80027fa:	9001      	str	r0, [sp, #4]
 80027fc:	ad01      	add	r5, sp, #4
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	beab      	bkpt	0x00ab
 8002804:	4604      	mov	r4, r0
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff ff58 	bl	80026bc <checkerror>
 800280c:	b003      	add	sp, #12
 800280e:	bd30      	pop	{r4, r5, pc}

08002810 <_close>:
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4605      	mov	r5, r0
 8002814:	f7ff ff2a 	bl	800266c <findslot>
 8002818:	4604      	mov	r4, r0
 800281a:	b930      	cbnz	r0, 800282a <_close+0x1a>
 800281c:	f000 faf6 	bl	8002e0c <__errno>
 8002820:	2309      	movs	r3, #9
 8002822:	6003      	str	r3, [r0, #0]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002828:	bd38      	pop	{r3, r4, r5, pc}
 800282a:	3d01      	subs	r5, #1
 800282c:	2d01      	cmp	r5, #1
 800282e:	d809      	bhi.n	8002844 <_close+0x34>
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <_close+0x40>)
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	429a      	cmp	r2, r3
 8002838:	d104      	bne.n	8002844 <_close+0x34>
 800283a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800283e:	6023      	str	r3, [r4, #0]
 8002840:	2000      	movs	r0, #0
 8002842:	e7f1      	b.n	8002828 <_close+0x18>
 8002844:	6820      	ldr	r0, [r4, #0]
 8002846:	f7ff ffd6 	bl	80027f6 <_swiclose>
 800284a:	2800      	cmp	r0, #0
 800284c:	d0f5      	beq.n	800283a <_close+0x2a>
 800284e:	e7eb      	b.n	8002828 <_close+0x18>
 8002850:	20000100 	.word	0x20000100

08002854 <_swistat>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	460c      	mov	r4, r1
 8002858:	f7ff ff08 	bl	800266c <findslot>
 800285c:	4605      	mov	r5, r0
 800285e:	b930      	cbnz	r0, 800286e <_swistat+0x1a>
 8002860:	f000 fad4 	bl	8002e0c <__errno>
 8002864:	2309      	movs	r3, #9
 8002866:	6003      	str	r3, [r0, #0]
 8002868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800286c:	bd70      	pop	{r4, r5, r6, pc}
 800286e:	6863      	ldr	r3, [r4, #4]
 8002870:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002874:	6063      	str	r3, [r4, #4]
 8002876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800287a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800287c:	260c      	movs	r6, #12
 800287e:	4630      	mov	r0, r6
 8002880:	4629      	mov	r1, r5
 8002882:	beab      	bkpt	0x00ab
 8002884:	4605      	mov	r5, r0
 8002886:	4628      	mov	r0, r5
 8002888:	f7ff ff18 	bl	80026bc <checkerror>
 800288c:	1c43      	adds	r3, r0, #1
 800288e:	d0eb      	beq.n	8002868 <_swistat+0x14>
 8002890:	6120      	str	r0, [r4, #16]
 8002892:	2000      	movs	r0, #0
 8002894:	e7ea      	b.n	800286c <_swistat+0x18>

08002896 <_fstat>:
 8002896:	460b      	mov	r3, r1
 8002898:	b510      	push	{r4, lr}
 800289a:	2100      	movs	r1, #0
 800289c:	4604      	mov	r4, r0
 800289e:	2258      	movs	r2, #88	@ 0x58
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 faab 	bl	8002dfc <memset>
 80028a6:	4601      	mov	r1, r0
 80028a8:	4620      	mov	r0, r4
 80028aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ae:	f7ff bfd1 	b.w	8002854 <_swistat>

080028b2 <_stat>:
 80028b2:	b538      	push	{r3, r4, r5, lr}
 80028b4:	460d      	mov	r5, r1
 80028b6:	4604      	mov	r4, r0
 80028b8:	2258      	movs	r2, #88	@ 0x58
 80028ba:	2100      	movs	r1, #0
 80028bc:	4628      	mov	r0, r5
 80028be:	f000 fa9d 	bl	8002dfc <memset>
 80028c2:	4620      	mov	r0, r4
 80028c4:	2100      	movs	r1, #0
 80028c6:	f000 f811 	bl	80028ec <_swiopen>
 80028ca:	1c43      	adds	r3, r0, #1
 80028cc:	4604      	mov	r4, r0
 80028ce:	d00b      	beq.n	80028e8 <_stat+0x36>
 80028d0:	686b      	ldr	r3, [r5, #4]
 80028d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80028d6:	606b      	str	r3, [r5, #4]
 80028d8:	4629      	mov	r1, r5
 80028da:	f7ff ffbb 	bl	8002854 <_swistat>
 80028de:	4605      	mov	r5, r0
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff ff95 	bl	8002810 <_close>
 80028e6:	462c      	mov	r4, r5
 80028e8:	4620      	mov	r0, r4
 80028ea:	bd38      	pop	{r3, r4, r5, pc}

080028ec <_swiopen>:
 80028ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f0:	4f29      	ldr	r7, [pc, #164]	@ (8002998 <_swiopen+0xac>)
 80028f2:	b096      	sub	sp, #88	@ 0x58
 80028f4:	4682      	mov	sl, r0
 80028f6:	460e      	mov	r6, r1
 80028f8:	2400      	movs	r4, #0
 80028fa:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80028fe:	3301      	adds	r3, #1
 8002900:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002904:	d00c      	beq.n	8002920 <_swiopen+0x34>
 8002906:	3401      	adds	r4, #1
 8002908:	2c14      	cmp	r4, #20
 800290a:	d1f6      	bne.n	80028fa <_swiopen+0xe>
 800290c:	f000 fa7e 	bl	8002e0c <__errno>
 8002910:	2318      	movs	r3, #24
 8002912:	6003      	str	r3, [r0, #0]
 8002914:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002918:	4620      	mov	r0, r4
 800291a:	b016      	add	sp, #88	@ 0x58
 800291c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002920:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002924:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002928:	46e9      	mov	r9, sp
 800292a:	d109      	bne.n	8002940 <_swiopen+0x54>
 800292c:	4649      	mov	r1, r9
 800292e:	4650      	mov	r0, sl
 8002930:	f7ff ffbf 	bl	80028b2 <_stat>
 8002934:	3001      	adds	r0, #1
 8002936:	d003      	beq.n	8002940 <_swiopen+0x54>
 8002938:	f000 fa68 	bl	8002e0c <__errno>
 800293c:	2311      	movs	r3, #17
 800293e:	e7e8      	b.n	8002912 <_swiopen+0x26>
 8002940:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002944:	f240 6301 	movw	r3, #1537	@ 0x601
 8002948:	07b2      	lsls	r2, r6, #30
 800294a:	bf48      	it	mi
 800294c:	f045 0502 	orrmi.w	r5, r5, #2
 8002950:	421e      	tst	r6, r3
 8002952:	bf18      	it	ne
 8002954:	f045 0504 	orrne.w	r5, r5, #4
 8002958:	0733      	lsls	r3, r6, #28
 800295a:	bf48      	it	mi
 800295c:	f025 0504 	bicmi.w	r5, r5, #4
 8002960:	4650      	mov	r0, sl
 8002962:	bf48      	it	mi
 8002964:	f045 0508 	orrmi.w	r5, r5, #8
 8002968:	f8cd a000 	str.w	sl, [sp]
 800296c:	f7fd fc40 	bl	80001f0 <strlen>
 8002970:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002974:	2501      	movs	r5, #1
 8002976:	4628      	mov	r0, r5
 8002978:	4649      	mov	r1, r9
 800297a:	beab      	bkpt	0x00ab
 800297c:	4605      	mov	r5, r0
 800297e:	2d00      	cmp	r5, #0
 8002980:	db05      	blt.n	800298e <_swiopen+0xa2>
 8002982:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002986:	4447      	add	r7, r8
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	e7c4      	b.n	8002918 <_swiopen+0x2c>
 800298e:	4628      	mov	r0, r5
 8002990:	f7ff fe86 	bl	80026a0 <error>
 8002994:	4604      	mov	r4, r0
 8002996:	e7bf      	b.n	8002918 <_swiopen+0x2c>
 8002998:	20000100 	.word	0x20000100

0800299c <_get_semihosting_exts>:
 800299c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80029a0:	4606      	mov	r6, r0
 80029a2:	460f      	mov	r7, r1
 80029a4:	4829      	ldr	r0, [pc, #164]	@ (8002a4c <_get_semihosting_exts+0xb0>)
 80029a6:	2100      	movs	r1, #0
 80029a8:	4615      	mov	r5, r2
 80029aa:	f7ff ff9f 	bl	80028ec <_swiopen>
 80029ae:	462a      	mov	r2, r5
 80029b0:	4604      	mov	r4, r0
 80029b2:	2100      	movs	r1, #0
 80029b4:	4630      	mov	r0, r6
 80029b6:	f000 fa21 	bl	8002dfc <memset>
 80029ba:	1c63      	adds	r3, r4, #1
 80029bc:	d014      	beq.n	80029e8 <_get_semihosting_exts+0x4c>
 80029be:	4620      	mov	r0, r4
 80029c0:	f7ff fe54 	bl	800266c <findslot>
 80029c4:	f04f 080c 	mov.w	r8, #12
 80029c8:	4681      	mov	r9, r0
 80029ca:	4640      	mov	r0, r8
 80029cc:	4649      	mov	r1, r9
 80029ce:	beab      	bkpt	0x00ab
 80029d0:	4680      	mov	r8, r0
 80029d2:	4640      	mov	r0, r8
 80029d4:	f7ff fe72 	bl	80026bc <checkerror>
 80029d8:	2803      	cmp	r0, #3
 80029da:	dd02      	ble.n	80029e2 <_get_semihosting_exts+0x46>
 80029dc:	1ec3      	subs	r3, r0, #3
 80029de:	42ab      	cmp	r3, r5
 80029e0:	dc07      	bgt.n	80029f2 <_get_semihosting_exts+0x56>
 80029e2:	4620      	mov	r0, r4
 80029e4:	f7ff ff14 	bl	8002810 <_close>
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029ec:	b003      	add	sp, #12
 80029ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029f2:	2204      	movs	r2, #4
 80029f4:	eb0d 0102 	add.w	r1, sp, r2
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7ff fe74 	bl	80026e6 <_read>
 80029fe:	2803      	cmp	r0, #3
 8002a00:	ddef      	ble.n	80029e2 <_get_semihosting_exts+0x46>
 8002a02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a06:	2b53      	cmp	r3, #83	@ 0x53
 8002a08:	d1eb      	bne.n	80029e2 <_get_semihosting_exts+0x46>
 8002a0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002a0e:	2b48      	cmp	r3, #72	@ 0x48
 8002a10:	d1e7      	bne.n	80029e2 <_get_semihosting_exts+0x46>
 8002a12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a16:	2b46      	cmp	r3, #70	@ 0x46
 8002a18:	d1e3      	bne.n	80029e2 <_get_semihosting_exts+0x46>
 8002a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a1e:	2b42      	cmp	r3, #66	@ 0x42
 8002a20:	d1df      	bne.n	80029e2 <_get_semihosting_exts+0x46>
 8002a22:	2201      	movs	r2, #1
 8002a24:	4639      	mov	r1, r7
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7ff fe77 	bl	800271a <_swilseek>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	dbd8      	blt.n	80029e2 <_get_semihosting_exts+0x46>
 8002a30:	462a      	mov	r2, r5
 8002a32:	4631      	mov	r1, r6
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff fe56 	bl	80026e6 <_read>
 8002a3a:	4605      	mov	r5, r0
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f7ff fee7 	bl	8002810 <_close>
 8002a42:	4628      	mov	r0, r5
 8002a44:	f7ff fe3a 	bl	80026bc <checkerror>
 8002a48:	e7d0      	b.n	80029ec <_get_semihosting_exts+0x50>
 8002a4a:	bf00      	nop
 8002a4c:	08003b60 	.word	0x08003b60

08002a50 <initialise_semihosting_exts>:
 8002a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a52:	4d0a      	ldr	r5, [pc, #40]	@ (8002a7c <initialise_semihosting_exts+0x2c>)
 8002a54:	4c0a      	ldr	r4, [pc, #40]	@ (8002a80 <initialise_semihosting_exts+0x30>)
 8002a56:	2100      	movs	r1, #0
 8002a58:	2201      	movs	r2, #1
 8002a5a:	a801      	add	r0, sp, #4
 8002a5c:	6029      	str	r1, [r5, #0]
 8002a5e:	6022      	str	r2, [r4, #0]
 8002a60:	f7ff ff9c 	bl	800299c <_get_semihosting_exts>
 8002a64:	2800      	cmp	r0, #0
 8002a66:	dd07      	ble.n	8002a78 <initialise_semihosting_exts+0x28>
 8002a68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a6c:	f003 0201 	and.w	r2, r3, #1
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	602a      	str	r2, [r5, #0]
 8002a76:	6023      	str	r3, [r4, #0]
 8002a78:	b003      	add	sp, #12
 8002a7a:	bd30      	pop	{r4, r5, pc}
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <_has_ext_stdout_stderr>:
 8002a84:	b510      	push	{r4, lr}
 8002a86:	4c04      	ldr	r4, [pc, #16]	@ (8002a98 <_has_ext_stdout_stderr+0x14>)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da01      	bge.n	8002a92 <_has_ext_stdout_stderr+0xe>
 8002a8e:	f7ff ffdf 	bl	8002a50 <initialise_semihosting_exts>
 8002a92:	6820      	ldr	r0, [r4, #0]
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <initialise_monitor_handles>:
 8002a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002b54 <initialise_monitor_handles+0xb8>
 8002aa6:	f8cd 9004 	str.w	r9, [sp, #4]
 8002aaa:	2303      	movs	r3, #3
 8002aac:	2400      	movs	r4, #0
 8002aae:	9303      	str	r3, [sp, #12]
 8002ab0:	af01      	add	r7, sp, #4
 8002ab2:	9402      	str	r4, [sp, #8]
 8002ab4:	2501      	movs	r5, #1
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	4639      	mov	r1, r7
 8002aba:	beab      	bkpt	0x00ab
 8002abc:	4605      	mov	r5, r0
 8002abe:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002b58 <initialise_monitor_handles+0xbc>
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	4c20      	ldr	r4, [pc, #128]	@ (8002b48 <initialise_monitor_handles+0xac>)
 8002ac6:	f8c8 5000 	str.w	r5, [r8]
 8002aca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ace:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	2b14      	cmp	r3, #20
 8002ad6:	d1fa      	bne.n	8002ace <initialise_monitor_handles+0x32>
 8002ad8:	f7ff ffd4 	bl	8002a84 <_has_ext_stdout_stderr>
 8002adc:	4d1b      	ldr	r5, [pc, #108]	@ (8002b4c <initialise_monitor_handles+0xb0>)
 8002ade:	b1d0      	cbz	r0, 8002b16 <initialise_monitor_handles+0x7a>
 8002ae0:	f04f 0a03 	mov.w	sl, #3
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	f8cd 9004 	str.w	r9, [sp, #4]
 8002aea:	2601      	movs	r6, #1
 8002aec:	f8cd a00c 	str.w	sl, [sp, #12]
 8002af0:	9302      	str	r3, [sp, #8]
 8002af2:	4630      	mov	r0, r6
 8002af4:	4639      	mov	r1, r7
 8002af6:	beab      	bkpt	0x00ab
 8002af8:	4683      	mov	fp, r0
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <initialise_monitor_handles+0xb4>)
 8002afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8002b00:	f8c3 b000 	str.w	fp, [r3]
 8002b04:	2308      	movs	r3, #8
 8002b06:	f8cd a00c 	str.w	sl, [sp, #12]
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	4639      	mov	r1, r7
 8002b10:	beab      	bkpt	0x00ab
 8002b12:	4606      	mov	r6, r0
 8002b14:	602e      	str	r6, [r5, #0]
 8002b16:	682b      	ldr	r3, [r5, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	bf02      	ittt	eq
 8002b1c:	4b0c      	ldreq	r3, [pc, #48]	@ (8002b50 <initialise_monitor_handles+0xb4>)
 8002b1e:	681b      	ldreq	r3, [r3, #0]
 8002b20:	602b      	streq	r3, [r5, #0]
 8002b22:	2600      	movs	r6, #0
 8002b24:	f8d8 3000 	ldr.w	r3, [r8]
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	6066      	str	r6, [r4, #4]
 8002b2c:	f7ff ffaa 	bl	8002a84 <_has_ext_stdout_stderr>
 8002b30:	b130      	cbz	r0, 8002b40 <initialise_monitor_handles+0xa4>
 8002b32:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <initialise_monitor_handles+0xb4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002b40:	b005      	add	sp, #20
 8002b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b46:	bf00      	nop
 8002b48:	20000100 	.word	0x20000100
 8002b4c:	200000f4 	.word	0x200000f4
 8002b50:	200000f8 	.word	0x200000f8
 8002b54:	08003b76 	.word	0x08003b76
 8002b58:	200000fc 	.word	0x200000fc

08002b5c <_isatty>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	f7ff fd85 	bl	800266c <findslot>
 8002b62:	2409      	movs	r4, #9
 8002b64:	4605      	mov	r5, r0
 8002b66:	b920      	cbnz	r0, 8002b72 <_isatty+0x16>
 8002b68:	f000 f950 	bl	8002e0c <__errno>
 8002b6c:	6004      	str	r4, [r0, #0]
 8002b6e:	2000      	movs	r0, #0
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	beab      	bkpt	0x00ab
 8002b78:	4604      	mov	r4, r0
 8002b7a:	2c01      	cmp	r4, #1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	d0f7      	beq.n	8002b70 <_isatty+0x14>
 8002b80:	f000 f944 	bl	8002e0c <__errno>
 8002b84:	2513      	movs	r5, #19
 8002b86:	4604      	mov	r4, r0
 8002b88:	2600      	movs	r6, #0
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	4631      	mov	r1, r6
 8002b8e:	beab      	bkpt	0x00ab
 8002b90:	4605      	mov	r5, r0
 8002b92:	6025      	str	r5, [r4, #0]
 8002b94:	e7eb      	b.n	8002b6e <_isatty+0x12>
	...

08002b98 <std>:
 8002b98:	2300      	movs	r3, #0
 8002b9a:	b510      	push	{r4, lr}
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8002ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ba6:	6083      	str	r3, [r0, #8]
 8002ba8:	8181      	strh	r1, [r0, #12]
 8002baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8002bac:	81c2      	strh	r2, [r0, #14]
 8002bae:	6183      	str	r3, [r0, #24]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	305c      	adds	r0, #92	@ 0x5c
 8002bb6:	f000 f921 	bl	8002dfc <memset>
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <std+0x58>)
 8002bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <std+0x5c>)
 8002bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <std+0x60>)
 8002bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <std+0x64>)
 8002bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8002bca:	4b0d      	ldr	r3, [pc, #52]	@ (8002c00 <std+0x68>)
 8002bcc:	6224      	str	r4, [r4, #32]
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	d006      	beq.n	8002be0 <std+0x48>
 8002bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002bd6:	4294      	cmp	r4, r2
 8002bd8:	d002      	beq.n	8002be0 <std+0x48>
 8002bda:	33d0      	adds	r3, #208	@ 0xd0
 8002bdc:	429c      	cmp	r4, r3
 8002bde:	d105      	bne.n	8002bec <std+0x54>
 8002be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be8:	f000 b93a 	b.w	8002e60 <__retarget_lock_init_recursive>
 8002bec:	bd10      	pop	{r4, pc}
 8002bee:	bf00      	nop
 8002bf0:	080036b9 	.word	0x080036b9
 8002bf4:	080036db 	.word	0x080036db
 8002bf8:	08003713 	.word	0x08003713
 8002bfc:	08003737 	.word	0x08003737
 8002c00:	200001a0 	.word	0x200001a0

08002c04 <stdio_exit_handler>:
 8002c04:	4a02      	ldr	r2, [pc, #8]	@ (8002c10 <stdio_exit_handler+0xc>)
 8002c06:	4903      	ldr	r1, [pc, #12]	@ (8002c14 <stdio_exit_handler+0x10>)
 8002c08:	4803      	ldr	r0, [pc, #12]	@ (8002c18 <stdio_exit_handler+0x14>)
 8002c0a:	f000 b869 	b.w	8002ce0 <_fwalk_sglue>
 8002c0e:	bf00      	nop
 8002c10:	20000014 	.word	0x20000014
 8002c14:	08003651 	.word	0x08003651
 8002c18:	20000024 	.word	0x20000024

08002c1c <cleanup_stdio>:
 8002c1c:	6841      	ldr	r1, [r0, #4]
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <cleanup_stdio+0x34>)
 8002c20:	4299      	cmp	r1, r3
 8002c22:	b510      	push	{r4, lr}
 8002c24:	4604      	mov	r4, r0
 8002c26:	d001      	beq.n	8002c2c <cleanup_stdio+0x10>
 8002c28:	f000 fd12 	bl	8003650 <_fflush_r>
 8002c2c:	68a1      	ldr	r1, [r4, #8]
 8002c2e:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <cleanup_stdio+0x38>)
 8002c30:	4299      	cmp	r1, r3
 8002c32:	d002      	beq.n	8002c3a <cleanup_stdio+0x1e>
 8002c34:	4620      	mov	r0, r4
 8002c36:	f000 fd0b 	bl	8003650 <_fflush_r>
 8002c3a:	68e1      	ldr	r1, [r4, #12]
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <cleanup_stdio+0x3c>)
 8002c3e:	4299      	cmp	r1, r3
 8002c40:	d004      	beq.n	8002c4c <cleanup_stdio+0x30>
 8002c42:	4620      	mov	r0, r4
 8002c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c48:	f000 bd02 	b.w	8003650 <_fflush_r>
 8002c4c:	bd10      	pop	{r4, pc}
 8002c4e:	bf00      	nop
 8002c50:	200001a0 	.word	0x200001a0
 8002c54:	20000208 	.word	0x20000208
 8002c58:	20000270 	.word	0x20000270

08002c5c <global_stdio_init.part.0>:
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <global_stdio_init.part.0+0x30>)
 8002c60:	4c0b      	ldr	r4, [pc, #44]	@ (8002c90 <global_stdio_init.part.0+0x34>)
 8002c62:	4a0c      	ldr	r2, [pc, #48]	@ (8002c94 <global_stdio_init.part.0+0x38>)
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	4620      	mov	r0, r4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	f7ff ff94 	bl	8002b98 <std>
 8002c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c74:	2201      	movs	r2, #1
 8002c76:	2109      	movs	r1, #9
 8002c78:	f7ff ff8e 	bl	8002b98 <std>
 8002c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c80:	2202      	movs	r2, #2
 8002c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c86:	2112      	movs	r1, #18
 8002c88:	f7ff bf86 	b.w	8002b98 <std>
 8002c8c:	200002d8 	.word	0x200002d8
 8002c90:	200001a0 	.word	0x200001a0
 8002c94:	08002c05 	.word	0x08002c05

08002c98 <__sfp_lock_acquire>:
 8002c98:	4801      	ldr	r0, [pc, #4]	@ (8002ca0 <__sfp_lock_acquire+0x8>)
 8002c9a:	f000 b8e2 	b.w	8002e62 <__retarget_lock_acquire_recursive>
 8002c9e:	bf00      	nop
 8002ca0:	200002dd 	.word	0x200002dd

08002ca4 <__sfp_lock_release>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	@ (8002cac <__sfp_lock_release+0x8>)
 8002ca6:	f000 b8dd 	b.w	8002e64 <__retarget_lock_release_recursive>
 8002caa:	bf00      	nop
 8002cac:	200002dd 	.word	0x200002dd

08002cb0 <__sinit>:
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	f7ff fff0 	bl	8002c98 <__sfp_lock_acquire>
 8002cb8:	6a23      	ldr	r3, [r4, #32]
 8002cba:	b11b      	cbz	r3, 8002cc4 <__sinit+0x14>
 8002cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc0:	f7ff bff0 	b.w	8002ca4 <__sfp_lock_release>
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__sinit+0x28>)
 8002cc6:	6223      	str	r3, [r4, #32]
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <__sinit+0x2c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f5      	bne.n	8002cbc <__sinit+0xc>
 8002cd0:	f7ff ffc4 	bl	8002c5c <global_stdio_init.part.0>
 8002cd4:	e7f2      	b.n	8002cbc <__sinit+0xc>
 8002cd6:	bf00      	nop
 8002cd8:	08002c1d 	.word	0x08002c1d
 8002cdc:	200002d8 	.word	0x200002d8

08002ce0 <_fwalk_sglue>:
 8002ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ce4:	4607      	mov	r7, r0
 8002ce6:	4688      	mov	r8, r1
 8002ce8:	4614      	mov	r4, r2
 8002cea:	2600      	movs	r6, #0
 8002cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8002cf4:	d505      	bpl.n	8002d02 <_fwalk_sglue+0x22>
 8002cf6:	6824      	ldr	r4, [r4, #0]
 8002cf8:	2c00      	cmp	r4, #0
 8002cfa:	d1f7      	bne.n	8002cec <_fwalk_sglue+0xc>
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d02:	89ab      	ldrh	r3, [r5, #12]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d907      	bls.n	8002d18 <_fwalk_sglue+0x38>
 8002d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	d003      	beq.n	8002d18 <_fwalk_sglue+0x38>
 8002d10:	4629      	mov	r1, r5
 8002d12:	4638      	mov	r0, r7
 8002d14:	47c0      	blx	r8
 8002d16:	4306      	orrs	r6, r0
 8002d18:	3568      	adds	r5, #104	@ 0x68
 8002d1a:	e7e9      	b.n	8002cf0 <_fwalk_sglue+0x10>

08002d1c <iprintf>:
 8002d1c:	b40f      	push	{r0, r1, r2, r3}
 8002d1e:	b507      	push	{r0, r1, r2, lr}
 8002d20:	4906      	ldr	r1, [pc, #24]	@ (8002d3c <iprintf+0x20>)
 8002d22:	ab04      	add	r3, sp, #16
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d2a:	6881      	ldr	r1, [r0, #8]
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	f000 f8c3 	bl	8002eb8 <_vfiprintf_r>
 8002d32:	b003      	add	sp, #12
 8002d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d38:	b004      	add	sp, #16
 8002d3a:	4770      	bx	lr
 8002d3c:	20000020 	.word	0x20000020

08002d40 <_puts_r>:
 8002d40:	6a03      	ldr	r3, [r0, #32]
 8002d42:	b570      	push	{r4, r5, r6, lr}
 8002d44:	6884      	ldr	r4, [r0, #8]
 8002d46:	4605      	mov	r5, r0
 8002d48:	460e      	mov	r6, r1
 8002d4a:	b90b      	cbnz	r3, 8002d50 <_puts_r+0x10>
 8002d4c:	f7ff ffb0 	bl	8002cb0 <__sinit>
 8002d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d52:	07db      	lsls	r3, r3, #31
 8002d54:	d405      	bmi.n	8002d62 <_puts_r+0x22>
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	0598      	lsls	r0, r3, #22
 8002d5a:	d402      	bmi.n	8002d62 <_puts_r+0x22>
 8002d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d5e:	f000 f880 	bl	8002e62 <__retarget_lock_acquire_recursive>
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	0719      	lsls	r1, r3, #28
 8002d66:	d502      	bpl.n	8002d6e <_puts_r+0x2e>
 8002d68:	6923      	ldr	r3, [r4, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d135      	bne.n	8002dda <_puts_r+0x9a>
 8002d6e:	4621      	mov	r1, r4
 8002d70:	4628      	mov	r0, r5
 8002d72:	f000 fd23 	bl	80037bc <__swsetup_r>
 8002d76:	b380      	cbz	r0, 8002dda <_puts_r+0x9a>
 8002d78:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002d7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d7e:	07da      	lsls	r2, r3, #31
 8002d80:	d405      	bmi.n	8002d8e <_puts_r+0x4e>
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	059b      	lsls	r3, r3, #22
 8002d86:	d402      	bmi.n	8002d8e <_puts_r+0x4e>
 8002d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d8a:	f000 f86b 	bl	8002e64 <__retarget_lock_release_recursive>
 8002d8e:	4628      	mov	r0, r5
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da04      	bge.n	8002da0 <_puts_r+0x60>
 8002d96:	69a2      	ldr	r2, [r4, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dc17      	bgt.n	8002dcc <_puts_r+0x8c>
 8002d9c:	290a      	cmp	r1, #10
 8002d9e:	d015      	beq.n	8002dcc <_puts_r+0x8c>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	6022      	str	r2, [r4, #0]
 8002da6:	7019      	strb	r1, [r3, #0]
 8002da8:	68a3      	ldr	r3, [r4, #8]
 8002daa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60a3      	str	r3, [r4, #8]
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d1ed      	bne.n	8002d92 <_puts_r+0x52>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da11      	bge.n	8002dde <_puts_r+0x9e>
 8002dba:	4622      	mov	r2, r4
 8002dbc:	210a      	movs	r1, #10
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f000 fcbd 	bl	800373e <__swbuf_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d0d7      	beq.n	8002d78 <_puts_r+0x38>
 8002dc8:	250a      	movs	r5, #10
 8002dca:	e7d7      	b.n	8002d7c <_puts_r+0x3c>
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fcb5 	bl	800373e <__swbuf_r>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d1e7      	bne.n	8002da8 <_puts_r+0x68>
 8002dd8:	e7ce      	b.n	8002d78 <_puts_r+0x38>
 8002dda:	3e01      	subs	r6, #1
 8002ddc:	e7e4      	b.n	8002da8 <_puts_r+0x68>
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	6022      	str	r2, [r4, #0]
 8002de4:	220a      	movs	r2, #10
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e7ee      	b.n	8002dc8 <_puts_r+0x88>
	...

08002dec <puts>:
 8002dec:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <puts+0xc>)
 8002dee:	4601      	mov	r1, r0
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	f7ff bfa5 	b.w	8002d40 <_puts_r>
 8002df6:	bf00      	nop
 8002df8:	20000020 	.word	0x20000020

08002dfc <memset>:
 8002dfc:	4402      	add	r2, r0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <__errno>:
 8002e0c:	4b01      	ldr	r3, [pc, #4]	@ (8002e14 <__errno+0x8>)
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000020 	.word	0x20000020

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e50 <__libc_init_array+0x38>)
 8002e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e54 <__libc_init_array+0x3c>)
 8002e1e:	1b64      	subs	r4, r4, r5
 8002e20:	10a4      	asrs	r4, r4, #2
 8002e22:	2600      	movs	r6, #0
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	4d0b      	ldr	r5, [pc, #44]	@ (8002e58 <__libc_init_array+0x40>)
 8002e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e5c <__libc_init_array+0x44>)
 8002e2c:	f000 fe40 	bl	8003ab0 <_init>
 8002e30:	1b64      	subs	r4, r4, r5
 8002e32:	10a4      	asrs	r4, r4, #2
 8002e34:	2600      	movs	r6, #0
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08003bb8 	.word	0x08003bb8
 8002e54:	08003bb8 	.word	0x08003bb8
 8002e58:	08003bb8 	.word	0x08003bb8
 8002e5c:	08003bbc 	.word	0x08003bbc

08002e60 <__retarget_lock_init_recursive>:
 8002e60:	4770      	bx	lr

08002e62 <__retarget_lock_acquire_recursive>:
 8002e62:	4770      	bx	lr

08002e64 <__retarget_lock_release_recursive>:
 8002e64:	4770      	bx	lr

08002e66 <__sfputc_r>:
 8002e66:	6893      	ldr	r3, [r2, #8]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	b410      	push	{r4}
 8002e6e:	6093      	str	r3, [r2, #8]
 8002e70:	da08      	bge.n	8002e84 <__sfputc_r+0x1e>
 8002e72:	6994      	ldr	r4, [r2, #24]
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	db01      	blt.n	8002e7c <__sfputc_r+0x16>
 8002e78:	290a      	cmp	r1, #10
 8002e7a:	d103      	bne.n	8002e84 <__sfputc_r+0x1e>
 8002e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e80:	f000 bc5d 	b.w	800373e <__swbuf_r>
 8002e84:	6813      	ldr	r3, [r2, #0]
 8002e86:	1c58      	adds	r0, r3, #1
 8002e88:	6010      	str	r0, [r2, #0]
 8002e8a:	7019      	strb	r1, [r3, #0]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <__sfputs_r>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	4606      	mov	r6, r0
 8002e98:	460f      	mov	r7, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	18d5      	adds	r5, r2, r3
 8002e9e:	42ac      	cmp	r4, r5
 8002ea0:	d101      	bne.n	8002ea6 <__sfputs_r+0x12>
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	e007      	b.n	8002eb6 <__sfputs_r+0x22>
 8002ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eaa:	463a      	mov	r2, r7
 8002eac:	4630      	mov	r0, r6
 8002eae:	f7ff ffda 	bl	8002e66 <__sfputc_r>
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	d1f3      	bne.n	8002e9e <__sfputs_r+0xa>
 8002eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002eb8 <_vfiprintf_r>:
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	b09d      	sub	sp, #116	@ 0x74
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	4698      	mov	r8, r3
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	b118      	cbz	r0, 8002ed0 <_vfiprintf_r+0x18>
 8002ec8:	6a03      	ldr	r3, [r0, #32]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <_vfiprintf_r+0x18>
 8002ecc:	f7ff fef0 	bl	8002cb0 <__sinit>
 8002ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ed2:	07d9      	lsls	r1, r3, #31
 8002ed4:	d405      	bmi.n	8002ee2 <_vfiprintf_r+0x2a>
 8002ed6:	89ab      	ldrh	r3, [r5, #12]
 8002ed8:	059a      	lsls	r2, r3, #22
 8002eda:	d402      	bmi.n	8002ee2 <_vfiprintf_r+0x2a>
 8002edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ede:	f7ff ffc0 	bl	8002e62 <__retarget_lock_acquire_recursive>
 8002ee2:	89ab      	ldrh	r3, [r5, #12]
 8002ee4:	071b      	lsls	r3, r3, #28
 8002ee6:	d501      	bpl.n	8002eec <_vfiprintf_r+0x34>
 8002ee8:	692b      	ldr	r3, [r5, #16]
 8002eea:	b99b      	cbnz	r3, 8002f14 <_vfiprintf_r+0x5c>
 8002eec:	4629      	mov	r1, r5
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f000 fc64 	bl	80037bc <__swsetup_r>
 8002ef4:	b170      	cbz	r0, 8002f14 <_vfiprintf_r+0x5c>
 8002ef6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ef8:	07dc      	lsls	r4, r3, #31
 8002efa:	d504      	bpl.n	8002f06 <_vfiprintf_r+0x4e>
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f00:	b01d      	add	sp, #116	@ 0x74
 8002f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f06:	89ab      	ldrh	r3, [r5, #12]
 8002f08:	0598      	lsls	r0, r3, #22
 8002f0a:	d4f7      	bmi.n	8002efc <_vfiprintf_r+0x44>
 8002f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f0e:	f7ff ffa9 	bl	8002e64 <__retarget_lock_release_recursive>
 8002f12:	e7f3      	b.n	8002efc <_vfiprintf_r+0x44>
 8002f14:	2300      	movs	r3, #0
 8002f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f18:	2320      	movs	r3, #32
 8002f1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f22:	2330      	movs	r3, #48	@ 0x30
 8002f24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80030d4 <_vfiprintf_r+0x21c>
 8002f28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f2c:	f04f 0901 	mov.w	r9, #1
 8002f30:	4623      	mov	r3, r4
 8002f32:	469a      	mov	sl, r3
 8002f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f38:	b10a      	cbz	r2, 8002f3e <_vfiprintf_r+0x86>
 8002f3a:	2a25      	cmp	r2, #37	@ 0x25
 8002f3c:	d1f9      	bne.n	8002f32 <_vfiprintf_r+0x7a>
 8002f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8002f42:	d00b      	beq.n	8002f5c <_vfiprintf_r+0xa4>
 8002f44:	465b      	mov	r3, fp
 8002f46:	4622      	mov	r2, r4
 8002f48:	4629      	mov	r1, r5
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	f7ff ffa2 	bl	8002e94 <__sfputs_r>
 8002f50:	3001      	adds	r0, #1
 8002f52:	f000 80a7 	beq.w	80030a4 <_vfiprintf_r+0x1ec>
 8002f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f58:	445a      	add	r2, fp
 8002f5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 809f 	beq.w	80030a4 <_vfiprintf_r+0x1ec>
 8002f66:	2300      	movs	r3, #0
 8002f68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f70:	f10a 0a01 	add.w	sl, sl, #1
 8002f74:	9304      	str	r3, [sp, #16]
 8002f76:	9307      	str	r3, [sp, #28]
 8002f78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f7e:	4654      	mov	r4, sl
 8002f80:	2205      	movs	r2, #5
 8002f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f86:	4853      	ldr	r0, [pc, #332]	@ (80030d4 <_vfiprintf_r+0x21c>)
 8002f88:	f7fd f93a 	bl	8000200 <memchr>
 8002f8c:	9a04      	ldr	r2, [sp, #16]
 8002f8e:	b9d8      	cbnz	r0, 8002fc8 <_vfiprintf_r+0x110>
 8002f90:	06d1      	lsls	r1, r2, #27
 8002f92:	bf44      	itt	mi
 8002f94:	2320      	movmi	r3, #32
 8002f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f9a:	0713      	lsls	r3, r2, #28
 8002f9c:	bf44      	itt	mi
 8002f9e:	232b      	movmi	r3, #43	@ 0x2b
 8002fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8002fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002faa:	d015      	beq.n	8002fd8 <_vfiprintf_r+0x120>
 8002fac:	9a07      	ldr	r2, [sp, #28]
 8002fae:	4654      	mov	r4, sl
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f04f 0c0a 	mov.w	ip, #10
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fbc:	3b30      	subs	r3, #48	@ 0x30
 8002fbe:	2b09      	cmp	r3, #9
 8002fc0:	d94b      	bls.n	800305a <_vfiprintf_r+0x1a2>
 8002fc2:	b1b0      	cbz	r0, 8002ff2 <_vfiprintf_r+0x13a>
 8002fc4:	9207      	str	r2, [sp, #28]
 8002fc6:	e014      	b.n	8002ff2 <_vfiprintf_r+0x13a>
 8002fc8:	eba0 0308 	sub.w	r3, r0, r8
 8002fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	9304      	str	r3, [sp, #16]
 8002fd4:	46a2      	mov	sl, r4
 8002fd6:	e7d2      	b.n	8002f7e <_vfiprintf_r+0xc6>
 8002fd8:	9b03      	ldr	r3, [sp, #12]
 8002fda:	1d19      	adds	r1, r3, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	9103      	str	r1, [sp, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bfbb      	ittet	lt
 8002fe4:	425b      	neglt	r3, r3
 8002fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8002fea:	9307      	strge	r3, [sp, #28]
 8002fec:	9307      	strlt	r3, [sp, #28]
 8002fee:	bfb8      	it	lt
 8002ff0:	9204      	strlt	r2, [sp, #16]
 8002ff2:	7823      	ldrb	r3, [r4, #0]
 8002ff4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ff6:	d10a      	bne.n	800300e <_vfiprintf_r+0x156>
 8002ff8:	7863      	ldrb	r3, [r4, #1]
 8002ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ffc:	d132      	bne.n	8003064 <_vfiprintf_r+0x1ac>
 8002ffe:	9b03      	ldr	r3, [sp, #12]
 8003000:	1d1a      	adds	r2, r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	9203      	str	r2, [sp, #12]
 8003006:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800300a:	3402      	adds	r4, #2
 800300c:	9305      	str	r3, [sp, #20]
 800300e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80030e4 <_vfiprintf_r+0x22c>
 8003012:	7821      	ldrb	r1, [r4, #0]
 8003014:	2203      	movs	r2, #3
 8003016:	4650      	mov	r0, sl
 8003018:	f7fd f8f2 	bl	8000200 <memchr>
 800301c:	b138      	cbz	r0, 800302e <_vfiprintf_r+0x176>
 800301e:	9b04      	ldr	r3, [sp, #16]
 8003020:	eba0 000a 	sub.w	r0, r0, sl
 8003024:	2240      	movs	r2, #64	@ 0x40
 8003026:	4082      	lsls	r2, r0
 8003028:	4313      	orrs	r3, r2
 800302a:	3401      	adds	r4, #1
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003032:	4829      	ldr	r0, [pc, #164]	@ (80030d8 <_vfiprintf_r+0x220>)
 8003034:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003038:	2206      	movs	r2, #6
 800303a:	f7fd f8e1 	bl	8000200 <memchr>
 800303e:	2800      	cmp	r0, #0
 8003040:	d03f      	beq.n	80030c2 <_vfiprintf_r+0x20a>
 8003042:	4b26      	ldr	r3, [pc, #152]	@ (80030dc <_vfiprintf_r+0x224>)
 8003044:	bb1b      	cbnz	r3, 800308e <_vfiprintf_r+0x1d6>
 8003046:	9b03      	ldr	r3, [sp, #12]
 8003048:	3307      	adds	r3, #7
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	3308      	adds	r3, #8
 8003050:	9303      	str	r3, [sp, #12]
 8003052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003054:	443b      	add	r3, r7
 8003056:	9309      	str	r3, [sp, #36]	@ 0x24
 8003058:	e76a      	b.n	8002f30 <_vfiprintf_r+0x78>
 800305a:	fb0c 3202 	mla	r2, ip, r2, r3
 800305e:	460c      	mov	r4, r1
 8003060:	2001      	movs	r0, #1
 8003062:	e7a8      	b.n	8002fb6 <_vfiprintf_r+0xfe>
 8003064:	2300      	movs	r3, #0
 8003066:	3401      	adds	r4, #1
 8003068:	9305      	str	r3, [sp, #20]
 800306a:	4619      	mov	r1, r3
 800306c:	f04f 0c0a 	mov.w	ip, #10
 8003070:	4620      	mov	r0, r4
 8003072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003076:	3a30      	subs	r2, #48	@ 0x30
 8003078:	2a09      	cmp	r2, #9
 800307a:	d903      	bls.n	8003084 <_vfiprintf_r+0x1cc>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0c6      	beq.n	800300e <_vfiprintf_r+0x156>
 8003080:	9105      	str	r1, [sp, #20]
 8003082:	e7c4      	b.n	800300e <_vfiprintf_r+0x156>
 8003084:	fb0c 2101 	mla	r1, ip, r1, r2
 8003088:	4604      	mov	r4, r0
 800308a:	2301      	movs	r3, #1
 800308c:	e7f0      	b.n	8003070 <_vfiprintf_r+0x1b8>
 800308e:	ab03      	add	r3, sp, #12
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	462a      	mov	r2, r5
 8003094:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <_vfiprintf_r+0x228>)
 8003096:	a904      	add	r1, sp, #16
 8003098:	4630      	mov	r0, r6
 800309a:	f3af 8000 	nop.w
 800309e:	4607      	mov	r7, r0
 80030a0:	1c78      	adds	r0, r7, #1
 80030a2:	d1d6      	bne.n	8003052 <_vfiprintf_r+0x19a>
 80030a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80030a6:	07d9      	lsls	r1, r3, #31
 80030a8:	d405      	bmi.n	80030b6 <_vfiprintf_r+0x1fe>
 80030aa:	89ab      	ldrh	r3, [r5, #12]
 80030ac:	059a      	lsls	r2, r3, #22
 80030ae:	d402      	bmi.n	80030b6 <_vfiprintf_r+0x1fe>
 80030b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80030b2:	f7ff fed7 	bl	8002e64 <__retarget_lock_release_recursive>
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	065b      	lsls	r3, r3, #25
 80030ba:	f53f af1f 	bmi.w	8002efc <_vfiprintf_r+0x44>
 80030be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030c0:	e71e      	b.n	8002f00 <_vfiprintf_r+0x48>
 80030c2:	ab03      	add	r3, sp, #12
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	462a      	mov	r2, r5
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <_vfiprintf_r+0x228>)
 80030ca:	a904      	add	r1, sp, #16
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 f91b 	bl	8003308 <_printf_i>
 80030d2:	e7e4      	b.n	800309e <_vfiprintf_r+0x1e6>
 80030d4:	08003b7a 	.word	0x08003b7a
 80030d8:	08003b84 	.word	0x08003b84
 80030dc:	00000000 	.word	0x00000000
 80030e0:	08002e95 	.word	0x08002e95
 80030e4:	08003b80 	.word	0x08003b80

080030e8 <sbrk_aligned>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4e0f      	ldr	r6, [pc, #60]	@ (8003128 <sbrk_aligned+0x40>)
 80030ec:	460c      	mov	r4, r1
 80030ee:	6831      	ldr	r1, [r6, #0]
 80030f0:	4605      	mov	r5, r0
 80030f2:	b911      	cbnz	r1, 80030fa <sbrk_aligned+0x12>
 80030f4:	f000 fc70 	bl	80039d8 <_sbrk_r>
 80030f8:	6030      	str	r0, [r6, #0]
 80030fa:	4621      	mov	r1, r4
 80030fc:	4628      	mov	r0, r5
 80030fe:	f000 fc6b 	bl	80039d8 <_sbrk_r>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d103      	bne.n	800310e <sbrk_aligned+0x26>
 8003106:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800310a:	4620      	mov	r0, r4
 800310c:	bd70      	pop	{r4, r5, r6, pc}
 800310e:	1cc4      	adds	r4, r0, #3
 8003110:	f024 0403 	bic.w	r4, r4, #3
 8003114:	42a0      	cmp	r0, r4
 8003116:	d0f8      	beq.n	800310a <sbrk_aligned+0x22>
 8003118:	1a21      	subs	r1, r4, r0
 800311a:	4628      	mov	r0, r5
 800311c:	f000 fc5c 	bl	80039d8 <_sbrk_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d1f2      	bne.n	800310a <sbrk_aligned+0x22>
 8003124:	e7ef      	b.n	8003106 <sbrk_aligned+0x1e>
 8003126:	bf00      	nop
 8003128:	200002e0 	.word	0x200002e0

0800312c <_malloc_r>:
 800312c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003130:	1ccd      	adds	r5, r1, #3
 8003132:	f025 0503 	bic.w	r5, r5, #3
 8003136:	3508      	adds	r5, #8
 8003138:	2d0c      	cmp	r5, #12
 800313a:	bf38      	it	cc
 800313c:	250c      	movcc	r5, #12
 800313e:	2d00      	cmp	r5, #0
 8003140:	4606      	mov	r6, r0
 8003142:	db01      	blt.n	8003148 <_malloc_r+0x1c>
 8003144:	42a9      	cmp	r1, r5
 8003146:	d904      	bls.n	8003152 <_malloc_r+0x26>
 8003148:	230c      	movs	r3, #12
 800314a:	6033      	str	r3, [r6, #0]
 800314c:	2000      	movs	r0, #0
 800314e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003228 <_malloc_r+0xfc>
 8003156:	f000 faa3 	bl	80036a0 <__malloc_lock>
 800315a:	f8d8 3000 	ldr.w	r3, [r8]
 800315e:	461c      	mov	r4, r3
 8003160:	bb44      	cbnz	r4, 80031b4 <_malloc_r+0x88>
 8003162:	4629      	mov	r1, r5
 8003164:	4630      	mov	r0, r6
 8003166:	f7ff ffbf 	bl	80030e8 <sbrk_aligned>
 800316a:	1c43      	adds	r3, r0, #1
 800316c:	4604      	mov	r4, r0
 800316e:	d158      	bne.n	8003222 <_malloc_r+0xf6>
 8003170:	f8d8 4000 	ldr.w	r4, [r8]
 8003174:	4627      	mov	r7, r4
 8003176:	2f00      	cmp	r7, #0
 8003178:	d143      	bne.n	8003202 <_malloc_r+0xd6>
 800317a:	2c00      	cmp	r4, #0
 800317c:	d04b      	beq.n	8003216 <_malloc_r+0xea>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	4639      	mov	r1, r7
 8003182:	4630      	mov	r0, r6
 8003184:	eb04 0903 	add.w	r9, r4, r3
 8003188:	f000 fc26 	bl	80039d8 <_sbrk_r>
 800318c:	4581      	cmp	r9, r0
 800318e:	d142      	bne.n	8003216 <_malloc_r+0xea>
 8003190:	6821      	ldr	r1, [r4, #0]
 8003192:	1a6d      	subs	r5, r5, r1
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f7ff ffa6 	bl	80030e8 <sbrk_aligned>
 800319c:	3001      	adds	r0, #1
 800319e:	d03a      	beq.n	8003216 <_malloc_r+0xea>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	442b      	add	r3, r5
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	f8d8 3000 	ldr.w	r3, [r8]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	bb62      	cbnz	r2, 8003208 <_malloc_r+0xdc>
 80031ae:	f8c8 7000 	str.w	r7, [r8]
 80031b2:	e00f      	b.n	80031d4 <_malloc_r+0xa8>
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	1b52      	subs	r2, r2, r5
 80031b8:	d420      	bmi.n	80031fc <_malloc_r+0xd0>
 80031ba:	2a0b      	cmp	r2, #11
 80031bc:	d917      	bls.n	80031ee <_malloc_r+0xc2>
 80031be:	1961      	adds	r1, r4, r5
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	6025      	str	r5, [r4, #0]
 80031c4:	bf18      	it	ne
 80031c6:	6059      	strne	r1, [r3, #4]
 80031c8:	6863      	ldr	r3, [r4, #4]
 80031ca:	bf08      	it	eq
 80031cc:	f8c8 1000 	streq.w	r1, [r8]
 80031d0:	5162      	str	r2, [r4, r5]
 80031d2:	604b      	str	r3, [r1, #4]
 80031d4:	4630      	mov	r0, r6
 80031d6:	f000 fa69 	bl	80036ac <__malloc_unlock>
 80031da:	f104 000b 	add.w	r0, r4, #11
 80031de:	1d23      	adds	r3, r4, #4
 80031e0:	f020 0007 	bic.w	r0, r0, #7
 80031e4:	1ac2      	subs	r2, r0, r3
 80031e6:	bf1c      	itt	ne
 80031e8:	1a1b      	subne	r3, r3, r0
 80031ea:	50a3      	strne	r3, [r4, r2]
 80031ec:	e7af      	b.n	800314e <_malloc_r+0x22>
 80031ee:	6862      	ldr	r2, [r4, #4]
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	bf0c      	ite	eq
 80031f4:	f8c8 2000 	streq.w	r2, [r8]
 80031f8:	605a      	strne	r2, [r3, #4]
 80031fa:	e7eb      	b.n	80031d4 <_malloc_r+0xa8>
 80031fc:	4623      	mov	r3, r4
 80031fe:	6864      	ldr	r4, [r4, #4]
 8003200:	e7ae      	b.n	8003160 <_malloc_r+0x34>
 8003202:	463c      	mov	r4, r7
 8003204:	687f      	ldr	r7, [r7, #4]
 8003206:	e7b6      	b.n	8003176 <_malloc_r+0x4a>
 8003208:	461a      	mov	r2, r3
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	42a3      	cmp	r3, r4
 800320e:	d1fb      	bne.n	8003208 <_malloc_r+0xdc>
 8003210:	2300      	movs	r3, #0
 8003212:	6053      	str	r3, [r2, #4]
 8003214:	e7de      	b.n	80031d4 <_malloc_r+0xa8>
 8003216:	230c      	movs	r3, #12
 8003218:	6033      	str	r3, [r6, #0]
 800321a:	4630      	mov	r0, r6
 800321c:	f000 fa46 	bl	80036ac <__malloc_unlock>
 8003220:	e794      	b.n	800314c <_malloc_r+0x20>
 8003222:	6005      	str	r5, [r0, #0]
 8003224:	e7d6      	b.n	80031d4 <_malloc_r+0xa8>
 8003226:	bf00      	nop
 8003228:	200002e4 	.word	0x200002e4

0800322c <_printf_common>:
 800322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	4616      	mov	r6, r2
 8003232:	4698      	mov	r8, r3
 8003234:	688a      	ldr	r2, [r1, #8]
 8003236:	690b      	ldr	r3, [r1, #16]
 8003238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800323c:	4293      	cmp	r3, r2
 800323e:	bfb8      	it	lt
 8003240:	4613      	movlt	r3, r2
 8003242:	6033      	str	r3, [r6, #0]
 8003244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003248:	4607      	mov	r7, r0
 800324a:	460c      	mov	r4, r1
 800324c:	b10a      	cbz	r2, 8003252 <_printf_common+0x26>
 800324e:	3301      	adds	r3, #1
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	0699      	lsls	r1, r3, #26
 8003256:	bf42      	ittt	mi
 8003258:	6833      	ldrmi	r3, [r6, #0]
 800325a:	3302      	addmi	r3, #2
 800325c:	6033      	strmi	r3, [r6, #0]
 800325e:	6825      	ldr	r5, [r4, #0]
 8003260:	f015 0506 	ands.w	r5, r5, #6
 8003264:	d106      	bne.n	8003274 <_printf_common+0x48>
 8003266:	f104 0a19 	add.w	sl, r4, #25
 800326a:	68e3      	ldr	r3, [r4, #12]
 800326c:	6832      	ldr	r2, [r6, #0]
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	42ab      	cmp	r3, r5
 8003272:	dc26      	bgt.n	80032c2 <_printf_common+0x96>
 8003274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	3b00      	subs	r3, #0
 800327c:	bf18      	it	ne
 800327e:	2301      	movne	r3, #1
 8003280:	0692      	lsls	r2, r2, #26
 8003282:	d42b      	bmi.n	80032dc <_printf_common+0xb0>
 8003284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003288:	4641      	mov	r1, r8
 800328a:	4638      	mov	r0, r7
 800328c:	47c8      	blx	r9
 800328e:	3001      	adds	r0, #1
 8003290:	d01e      	beq.n	80032d0 <_printf_common+0xa4>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	6922      	ldr	r2, [r4, #16]
 8003296:	f003 0306 	and.w	r3, r3, #6
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf02      	ittt	eq
 800329e:	68e5      	ldreq	r5, [r4, #12]
 80032a0:	6833      	ldreq	r3, [r6, #0]
 80032a2:	1aed      	subeq	r5, r5, r3
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	bf0c      	ite	eq
 80032a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032ac:	2500      	movne	r5, #0
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bfc4      	itt	gt
 80032b2:	1a9b      	subgt	r3, r3, r2
 80032b4:	18ed      	addgt	r5, r5, r3
 80032b6:	2600      	movs	r6, #0
 80032b8:	341a      	adds	r4, #26
 80032ba:	42b5      	cmp	r5, r6
 80032bc:	d11a      	bne.n	80032f4 <_printf_common+0xc8>
 80032be:	2000      	movs	r0, #0
 80032c0:	e008      	b.n	80032d4 <_printf_common+0xa8>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4652      	mov	r2, sl
 80032c6:	4641      	mov	r1, r8
 80032c8:	4638      	mov	r0, r7
 80032ca:	47c8      	blx	r9
 80032cc:	3001      	adds	r0, #1
 80032ce:	d103      	bne.n	80032d8 <_printf_common+0xac>
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d8:	3501      	adds	r5, #1
 80032da:	e7c6      	b.n	800326a <_printf_common+0x3e>
 80032dc:	18e1      	adds	r1, r4, r3
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	2030      	movs	r0, #48	@ 0x30
 80032e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80032e6:	4422      	add	r2, r4
 80032e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80032ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80032f0:	3302      	adds	r3, #2
 80032f2:	e7c7      	b.n	8003284 <_printf_common+0x58>
 80032f4:	2301      	movs	r3, #1
 80032f6:	4622      	mov	r2, r4
 80032f8:	4641      	mov	r1, r8
 80032fa:	4638      	mov	r0, r7
 80032fc:	47c8      	blx	r9
 80032fe:	3001      	adds	r0, #1
 8003300:	d0e6      	beq.n	80032d0 <_printf_common+0xa4>
 8003302:	3601      	adds	r6, #1
 8003304:	e7d9      	b.n	80032ba <_printf_common+0x8e>
	...

08003308 <_printf_i>:
 8003308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	7e0f      	ldrb	r7, [r1, #24]
 800330e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003310:	2f78      	cmp	r7, #120	@ 0x78
 8003312:	4691      	mov	r9, r2
 8003314:	4680      	mov	r8, r0
 8003316:	460c      	mov	r4, r1
 8003318:	469a      	mov	sl, r3
 800331a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800331e:	d807      	bhi.n	8003330 <_printf_i+0x28>
 8003320:	2f62      	cmp	r7, #98	@ 0x62
 8003322:	d80a      	bhi.n	800333a <_printf_i+0x32>
 8003324:	2f00      	cmp	r7, #0
 8003326:	f000 80d2 	beq.w	80034ce <_printf_i+0x1c6>
 800332a:	2f58      	cmp	r7, #88	@ 0x58
 800332c:	f000 80b9 	beq.w	80034a2 <_printf_i+0x19a>
 8003330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003338:	e03a      	b.n	80033b0 <_printf_i+0xa8>
 800333a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800333e:	2b15      	cmp	r3, #21
 8003340:	d8f6      	bhi.n	8003330 <_printf_i+0x28>
 8003342:	a101      	add	r1, pc, #4	@ (adr r1, 8003348 <_printf_i+0x40>)
 8003344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003348:	080033a1 	.word	0x080033a1
 800334c:	080033b5 	.word	0x080033b5
 8003350:	08003331 	.word	0x08003331
 8003354:	08003331 	.word	0x08003331
 8003358:	08003331 	.word	0x08003331
 800335c:	08003331 	.word	0x08003331
 8003360:	080033b5 	.word	0x080033b5
 8003364:	08003331 	.word	0x08003331
 8003368:	08003331 	.word	0x08003331
 800336c:	08003331 	.word	0x08003331
 8003370:	08003331 	.word	0x08003331
 8003374:	080034b5 	.word	0x080034b5
 8003378:	080033df 	.word	0x080033df
 800337c:	0800346f 	.word	0x0800346f
 8003380:	08003331 	.word	0x08003331
 8003384:	08003331 	.word	0x08003331
 8003388:	080034d7 	.word	0x080034d7
 800338c:	08003331 	.word	0x08003331
 8003390:	080033df 	.word	0x080033df
 8003394:	08003331 	.word	0x08003331
 8003398:	08003331 	.word	0x08003331
 800339c:	08003477 	.word	0x08003477
 80033a0:	6833      	ldr	r3, [r6, #0]
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6032      	str	r2, [r6, #0]
 80033a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033b0:	2301      	movs	r3, #1
 80033b2:	e09d      	b.n	80034f0 <_printf_i+0x1e8>
 80033b4:	6833      	ldr	r3, [r6, #0]
 80033b6:	6820      	ldr	r0, [r4, #0]
 80033b8:	1d19      	adds	r1, r3, #4
 80033ba:	6031      	str	r1, [r6, #0]
 80033bc:	0606      	lsls	r6, r0, #24
 80033be:	d501      	bpl.n	80033c4 <_printf_i+0xbc>
 80033c0:	681d      	ldr	r5, [r3, #0]
 80033c2:	e003      	b.n	80033cc <_printf_i+0xc4>
 80033c4:	0645      	lsls	r5, r0, #25
 80033c6:	d5fb      	bpl.n	80033c0 <_printf_i+0xb8>
 80033c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	da03      	bge.n	80033d8 <_printf_i+0xd0>
 80033d0:	232d      	movs	r3, #45	@ 0x2d
 80033d2:	426d      	negs	r5, r5
 80033d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033d8:	4859      	ldr	r0, [pc, #356]	@ (8003540 <_printf_i+0x238>)
 80033da:	230a      	movs	r3, #10
 80033dc:	e011      	b.n	8003402 <_printf_i+0xfa>
 80033de:	6821      	ldr	r1, [r4, #0]
 80033e0:	6833      	ldr	r3, [r6, #0]
 80033e2:	0608      	lsls	r0, r1, #24
 80033e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80033e8:	d402      	bmi.n	80033f0 <_printf_i+0xe8>
 80033ea:	0649      	lsls	r1, r1, #25
 80033ec:	bf48      	it	mi
 80033ee:	b2ad      	uxthmi	r5, r5
 80033f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80033f2:	4853      	ldr	r0, [pc, #332]	@ (8003540 <_printf_i+0x238>)
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	bf14      	ite	ne
 80033f8:	230a      	movne	r3, #10
 80033fa:	2308      	moveq	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003402:	6866      	ldr	r6, [r4, #4]
 8003404:	60a6      	str	r6, [r4, #8]
 8003406:	2e00      	cmp	r6, #0
 8003408:	bfa2      	ittt	ge
 800340a:	6821      	ldrge	r1, [r4, #0]
 800340c:	f021 0104 	bicge.w	r1, r1, #4
 8003410:	6021      	strge	r1, [r4, #0]
 8003412:	b90d      	cbnz	r5, 8003418 <_printf_i+0x110>
 8003414:	2e00      	cmp	r6, #0
 8003416:	d04b      	beq.n	80034b0 <_printf_i+0x1a8>
 8003418:	4616      	mov	r6, r2
 800341a:	fbb5 f1f3 	udiv	r1, r5, r3
 800341e:	fb03 5711 	mls	r7, r3, r1, r5
 8003422:	5dc7      	ldrb	r7, [r0, r7]
 8003424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003428:	462f      	mov	r7, r5
 800342a:	42bb      	cmp	r3, r7
 800342c:	460d      	mov	r5, r1
 800342e:	d9f4      	bls.n	800341a <_printf_i+0x112>
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10b      	bne.n	800344c <_printf_i+0x144>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	07df      	lsls	r7, r3, #31
 8003438:	d508      	bpl.n	800344c <_printf_i+0x144>
 800343a:	6923      	ldr	r3, [r4, #16]
 800343c:	6861      	ldr	r1, [r4, #4]
 800343e:	4299      	cmp	r1, r3
 8003440:	bfde      	ittt	le
 8003442:	2330      	movle	r3, #48	@ 0x30
 8003444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003448:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800344c:	1b92      	subs	r2, r2, r6
 800344e:	6122      	str	r2, [r4, #16]
 8003450:	f8cd a000 	str.w	sl, [sp]
 8003454:	464b      	mov	r3, r9
 8003456:	aa03      	add	r2, sp, #12
 8003458:	4621      	mov	r1, r4
 800345a:	4640      	mov	r0, r8
 800345c:	f7ff fee6 	bl	800322c <_printf_common>
 8003460:	3001      	adds	r0, #1
 8003462:	d14a      	bne.n	80034fa <_printf_i+0x1f2>
 8003464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003468:	b004      	add	sp, #16
 800346a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	f043 0320 	orr.w	r3, r3, #32
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	4833      	ldr	r0, [pc, #204]	@ (8003544 <_printf_i+0x23c>)
 8003478:	2778      	movs	r7, #120	@ 0x78
 800347a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	6831      	ldr	r1, [r6, #0]
 8003482:	061f      	lsls	r7, r3, #24
 8003484:	f851 5b04 	ldr.w	r5, [r1], #4
 8003488:	d402      	bmi.n	8003490 <_printf_i+0x188>
 800348a:	065f      	lsls	r7, r3, #25
 800348c:	bf48      	it	mi
 800348e:	b2ad      	uxthmi	r5, r5
 8003490:	6031      	str	r1, [r6, #0]
 8003492:	07d9      	lsls	r1, r3, #31
 8003494:	bf44      	itt	mi
 8003496:	f043 0320 	orrmi.w	r3, r3, #32
 800349a:	6023      	strmi	r3, [r4, #0]
 800349c:	b11d      	cbz	r5, 80034a6 <_printf_i+0x19e>
 800349e:	2310      	movs	r3, #16
 80034a0:	e7ac      	b.n	80033fc <_printf_i+0xf4>
 80034a2:	4827      	ldr	r0, [pc, #156]	@ (8003540 <_printf_i+0x238>)
 80034a4:	e7e9      	b.n	800347a <_printf_i+0x172>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f023 0320 	bic.w	r3, r3, #32
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	e7f6      	b.n	800349e <_printf_i+0x196>
 80034b0:	4616      	mov	r6, r2
 80034b2:	e7bd      	b.n	8003430 <_printf_i+0x128>
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	6961      	ldr	r1, [r4, #20]
 80034ba:	1d18      	adds	r0, r3, #4
 80034bc:	6030      	str	r0, [r6, #0]
 80034be:	062e      	lsls	r6, r5, #24
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	d501      	bpl.n	80034c8 <_printf_i+0x1c0>
 80034c4:	6019      	str	r1, [r3, #0]
 80034c6:	e002      	b.n	80034ce <_printf_i+0x1c6>
 80034c8:	0668      	lsls	r0, r5, #25
 80034ca:	d5fb      	bpl.n	80034c4 <_printf_i+0x1bc>
 80034cc:	8019      	strh	r1, [r3, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	6123      	str	r3, [r4, #16]
 80034d2:	4616      	mov	r6, r2
 80034d4:	e7bc      	b.n	8003450 <_printf_i+0x148>
 80034d6:	6833      	ldr	r3, [r6, #0]
 80034d8:	1d1a      	adds	r2, r3, #4
 80034da:	6032      	str	r2, [r6, #0]
 80034dc:	681e      	ldr	r6, [r3, #0]
 80034de:	6862      	ldr	r2, [r4, #4]
 80034e0:	2100      	movs	r1, #0
 80034e2:	4630      	mov	r0, r6
 80034e4:	f7fc fe8c 	bl	8000200 <memchr>
 80034e8:	b108      	cbz	r0, 80034ee <_printf_i+0x1e6>
 80034ea:	1b80      	subs	r0, r0, r6
 80034ec:	6060      	str	r0, [r4, #4]
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	2300      	movs	r3, #0
 80034f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034f8:	e7aa      	b.n	8003450 <_printf_i+0x148>
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	4632      	mov	r2, r6
 80034fe:	4649      	mov	r1, r9
 8003500:	4640      	mov	r0, r8
 8003502:	47d0      	blx	sl
 8003504:	3001      	adds	r0, #1
 8003506:	d0ad      	beq.n	8003464 <_printf_i+0x15c>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	079b      	lsls	r3, r3, #30
 800350c:	d413      	bmi.n	8003536 <_printf_i+0x22e>
 800350e:	68e0      	ldr	r0, [r4, #12]
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	4298      	cmp	r0, r3
 8003514:	bfb8      	it	lt
 8003516:	4618      	movlt	r0, r3
 8003518:	e7a6      	b.n	8003468 <_printf_i+0x160>
 800351a:	2301      	movs	r3, #1
 800351c:	4632      	mov	r2, r6
 800351e:	4649      	mov	r1, r9
 8003520:	4640      	mov	r0, r8
 8003522:	47d0      	blx	sl
 8003524:	3001      	adds	r0, #1
 8003526:	d09d      	beq.n	8003464 <_printf_i+0x15c>
 8003528:	3501      	adds	r5, #1
 800352a:	68e3      	ldr	r3, [r4, #12]
 800352c:	9903      	ldr	r1, [sp, #12]
 800352e:	1a5b      	subs	r3, r3, r1
 8003530:	42ab      	cmp	r3, r5
 8003532:	dcf2      	bgt.n	800351a <_printf_i+0x212>
 8003534:	e7eb      	b.n	800350e <_printf_i+0x206>
 8003536:	2500      	movs	r5, #0
 8003538:	f104 0619 	add.w	r6, r4, #25
 800353c:	e7f5      	b.n	800352a <_printf_i+0x222>
 800353e:	bf00      	nop
 8003540:	08003b8b 	.word	0x08003b8b
 8003544:	08003b9c 	.word	0x08003b9c

08003548 <__sflush_r>:
 8003548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003550:	0716      	lsls	r6, r2, #28
 8003552:	4605      	mov	r5, r0
 8003554:	460c      	mov	r4, r1
 8003556:	d454      	bmi.n	8003602 <__sflush_r+0xba>
 8003558:	684b      	ldr	r3, [r1, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	dc02      	bgt.n	8003564 <__sflush_r+0x1c>
 800355e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	dd48      	ble.n	80035f6 <__sflush_r+0xae>
 8003564:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003566:	2e00      	cmp	r6, #0
 8003568:	d045      	beq.n	80035f6 <__sflush_r+0xae>
 800356a:	2300      	movs	r3, #0
 800356c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003570:	682f      	ldr	r7, [r5, #0]
 8003572:	6a21      	ldr	r1, [r4, #32]
 8003574:	602b      	str	r3, [r5, #0]
 8003576:	d030      	beq.n	80035da <__sflush_r+0x92>
 8003578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	0759      	lsls	r1, r3, #29
 800357e:	d505      	bpl.n	800358c <__sflush_r+0x44>
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003586:	b10b      	cbz	r3, 800358c <__sflush_r+0x44>
 8003588:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003590:	6a21      	ldr	r1, [r4, #32]
 8003592:	4628      	mov	r0, r5
 8003594:	47b0      	blx	r6
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	d106      	bne.n	80035aa <__sflush_r+0x62>
 800359c:	6829      	ldr	r1, [r5, #0]
 800359e:	291d      	cmp	r1, #29
 80035a0:	d82b      	bhi.n	80035fa <__sflush_r+0xb2>
 80035a2:	4a2a      	ldr	r2, [pc, #168]	@ (800364c <__sflush_r+0x104>)
 80035a4:	410a      	asrs	r2, r1
 80035a6:	07d6      	lsls	r6, r2, #31
 80035a8:	d427      	bmi.n	80035fa <__sflush_r+0xb2>
 80035aa:	2200      	movs	r2, #0
 80035ac:	6062      	str	r2, [r4, #4]
 80035ae:	04d9      	lsls	r1, r3, #19
 80035b0:	6922      	ldr	r2, [r4, #16]
 80035b2:	6022      	str	r2, [r4, #0]
 80035b4:	d504      	bpl.n	80035c0 <__sflush_r+0x78>
 80035b6:	1c42      	adds	r2, r0, #1
 80035b8:	d101      	bne.n	80035be <__sflush_r+0x76>
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	b903      	cbnz	r3, 80035c0 <__sflush_r+0x78>
 80035be:	6560      	str	r0, [r4, #84]	@ 0x54
 80035c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035c2:	602f      	str	r7, [r5, #0]
 80035c4:	b1b9      	cbz	r1, 80035f6 <__sflush_r+0xae>
 80035c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035ca:	4299      	cmp	r1, r3
 80035cc:	d002      	beq.n	80035d4 <__sflush_r+0x8c>
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fa24 	bl	8003a1c <_free_r>
 80035d4:	2300      	movs	r3, #0
 80035d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80035d8:	e00d      	b.n	80035f6 <__sflush_r+0xae>
 80035da:	2301      	movs	r3, #1
 80035dc:	4628      	mov	r0, r5
 80035de:	47b0      	blx	r6
 80035e0:	4602      	mov	r2, r0
 80035e2:	1c50      	adds	r0, r2, #1
 80035e4:	d1c9      	bne.n	800357a <__sflush_r+0x32>
 80035e6:	682b      	ldr	r3, [r5, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0c6      	beq.n	800357a <__sflush_r+0x32>
 80035ec:	2b1d      	cmp	r3, #29
 80035ee:	d001      	beq.n	80035f4 <__sflush_r+0xac>
 80035f0:	2b16      	cmp	r3, #22
 80035f2:	d11e      	bne.n	8003632 <__sflush_r+0xea>
 80035f4:	602f      	str	r7, [r5, #0]
 80035f6:	2000      	movs	r0, #0
 80035f8:	e022      	b.n	8003640 <__sflush_r+0xf8>
 80035fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035fe:	b21b      	sxth	r3, r3
 8003600:	e01b      	b.n	800363a <__sflush_r+0xf2>
 8003602:	690f      	ldr	r7, [r1, #16]
 8003604:	2f00      	cmp	r7, #0
 8003606:	d0f6      	beq.n	80035f6 <__sflush_r+0xae>
 8003608:	0793      	lsls	r3, r2, #30
 800360a:	680e      	ldr	r6, [r1, #0]
 800360c:	bf08      	it	eq
 800360e:	694b      	ldreq	r3, [r1, #20]
 8003610:	600f      	str	r7, [r1, #0]
 8003612:	bf18      	it	ne
 8003614:	2300      	movne	r3, #0
 8003616:	eba6 0807 	sub.w	r8, r6, r7
 800361a:	608b      	str	r3, [r1, #8]
 800361c:	f1b8 0f00 	cmp.w	r8, #0
 8003620:	dde9      	ble.n	80035f6 <__sflush_r+0xae>
 8003622:	6a21      	ldr	r1, [r4, #32]
 8003624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003626:	4643      	mov	r3, r8
 8003628:	463a      	mov	r2, r7
 800362a:	4628      	mov	r0, r5
 800362c:	47b0      	blx	r6
 800362e:	2800      	cmp	r0, #0
 8003630:	dc08      	bgt.n	8003644 <__sflush_r+0xfc>
 8003632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003644:	4407      	add	r7, r0
 8003646:	eba8 0800 	sub.w	r8, r8, r0
 800364a:	e7e7      	b.n	800361c <__sflush_r+0xd4>
 800364c:	dfbffffe 	.word	0xdfbffffe

08003650 <_fflush_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	690b      	ldr	r3, [r1, #16]
 8003654:	4605      	mov	r5, r0
 8003656:	460c      	mov	r4, r1
 8003658:	b913      	cbnz	r3, 8003660 <_fflush_r+0x10>
 800365a:	2500      	movs	r5, #0
 800365c:	4628      	mov	r0, r5
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	b118      	cbz	r0, 800366a <_fflush_r+0x1a>
 8003662:	6a03      	ldr	r3, [r0, #32]
 8003664:	b90b      	cbnz	r3, 800366a <_fflush_r+0x1a>
 8003666:	f7ff fb23 	bl	8002cb0 <__sinit>
 800366a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f3      	beq.n	800365a <_fflush_r+0xa>
 8003672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003674:	07d0      	lsls	r0, r2, #31
 8003676:	d404      	bmi.n	8003682 <_fflush_r+0x32>
 8003678:	0599      	lsls	r1, r3, #22
 800367a:	d402      	bmi.n	8003682 <_fflush_r+0x32>
 800367c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800367e:	f7ff fbf0 	bl	8002e62 <__retarget_lock_acquire_recursive>
 8003682:	4628      	mov	r0, r5
 8003684:	4621      	mov	r1, r4
 8003686:	f7ff ff5f 	bl	8003548 <__sflush_r>
 800368a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800368c:	07da      	lsls	r2, r3, #31
 800368e:	4605      	mov	r5, r0
 8003690:	d4e4      	bmi.n	800365c <_fflush_r+0xc>
 8003692:	89a3      	ldrh	r3, [r4, #12]
 8003694:	059b      	lsls	r3, r3, #22
 8003696:	d4e1      	bmi.n	800365c <_fflush_r+0xc>
 8003698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800369a:	f7ff fbe3 	bl	8002e64 <__retarget_lock_release_recursive>
 800369e:	e7dd      	b.n	800365c <_fflush_r+0xc>

080036a0 <__malloc_lock>:
 80036a0:	4801      	ldr	r0, [pc, #4]	@ (80036a8 <__malloc_lock+0x8>)
 80036a2:	f7ff bbde 	b.w	8002e62 <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	200002dc 	.word	0x200002dc

080036ac <__malloc_unlock>:
 80036ac:	4801      	ldr	r0, [pc, #4]	@ (80036b4 <__malloc_unlock+0x8>)
 80036ae:	f7ff bbd9 	b.w	8002e64 <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	200002dc 	.word	0x200002dc

080036b8 <__sread>:
 80036b8:	b510      	push	{r4, lr}
 80036ba:	460c      	mov	r4, r1
 80036bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c0:	f000 f978 	bl	80039b4 <_read_r>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	bfab      	itete	ge
 80036c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036ca:	89a3      	ldrhlt	r3, [r4, #12]
 80036cc:	181b      	addge	r3, r3, r0
 80036ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036d2:	bfac      	ite	ge
 80036d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036d6:	81a3      	strhlt	r3, [r4, #12]
 80036d8:	bd10      	pop	{r4, pc}

080036da <__swrite>:
 80036da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036de:	461f      	mov	r7, r3
 80036e0:	898b      	ldrh	r3, [r1, #12]
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	4605      	mov	r5, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	4616      	mov	r6, r2
 80036ea:	d505      	bpl.n	80036f8 <__swrite+0x1e>
 80036ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f0:	2302      	movs	r3, #2
 80036f2:	2200      	movs	r2, #0
 80036f4:	f000 f94c 	bl	8003990 <_lseek_r>
 80036f8:	89a3      	ldrh	r3, [r4, #12]
 80036fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003702:	81a3      	strh	r3, [r4, #12]
 8003704:	4632      	mov	r2, r6
 8003706:	463b      	mov	r3, r7
 8003708:	4628      	mov	r0, r5
 800370a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800370e:	f000 b973 	b.w	80039f8 <_write_r>

08003712 <__sseek>:
 8003712:	b510      	push	{r4, lr}
 8003714:	460c      	mov	r4, r1
 8003716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800371a:	f000 f939 	bl	8003990 <_lseek_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	bf15      	itete	ne
 8003724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800372a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800372e:	81a3      	strheq	r3, [r4, #12]
 8003730:	bf18      	it	ne
 8003732:	81a3      	strhne	r3, [r4, #12]
 8003734:	bd10      	pop	{r4, pc}

08003736 <__sclose>:
 8003736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373a:	f000 b8f7 	b.w	800392c <_close_r>

0800373e <__swbuf_r>:
 800373e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003740:	460e      	mov	r6, r1
 8003742:	4614      	mov	r4, r2
 8003744:	4605      	mov	r5, r0
 8003746:	b118      	cbz	r0, 8003750 <__swbuf_r+0x12>
 8003748:	6a03      	ldr	r3, [r0, #32]
 800374a:	b90b      	cbnz	r3, 8003750 <__swbuf_r+0x12>
 800374c:	f7ff fab0 	bl	8002cb0 <__sinit>
 8003750:	69a3      	ldr	r3, [r4, #24]
 8003752:	60a3      	str	r3, [r4, #8]
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	071a      	lsls	r2, r3, #28
 8003758:	d501      	bpl.n	800375e <__swbuf_r+0x20>
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	b943      	cbnz	r3, 8003770 <__swbuf_r+0x32>
 800375e:	4621      	mov	r1, r4
 8003760:	4628      	mov	r0, r5
 8003762:	f000 f82b 	bl	80037bc <__swsetup_r>
 8003766:	b118      	cbz	r0, 8003770 <__swbuf_r+0x32>
 8003768:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800376c:	4638      	mov	r0, r7
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	6922      	ldr	r2, [r4, #16]
 8003774:	1a98      	subs	r0, r3, r2
 8003776:	6963      	ldr	r3, [r4, #20]
 8003778:	b2f6      	uxtb	r6, r6
 800377a:	4283      	cmp	r3, r0
 800377c:	4637      	mov	r7, r6
 800377e:	dc05      	bgt.n	800378c <__swbuf_r+0x4e>
 8003780:	4621      	mov	r1, r4
 8003782:	4628      	mov	r0, r5
 8003784:	f7ff ff64 	bl	8003650 <_fflush_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	d1ed      	bne.n	8003768 <__swbuf_r+0x2a>
 800378c:	68a3      	ldr	r3, [r4, #8]
 800378e:	3b01      	subs	r3, #1
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	6022      	str	r2, [r4, #0]
 8003798:	701e      	strb	r6, [r3, #0]
 800379a:	6962      	ldr	r2, [r4, #20]
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	429a      	cmp	r2, r3
 80037a0:	d004      	beq.n	80037ac <__swbuf_r+0x6e>
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	07db      	lsls	r3, r3, #31
 80037a6:	d5e1      	bpl.n	800376c <__swbuf_r+0x2e>
 80037a8:	2e0a      	cmp	r6, #10
 80037aa:	d1df      	bne.n	800376c <__swbuf_r+0x2e>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7ff ff4e 	bl	8003650 <_fflush_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d0d9      	beq.n	800376c <__swbuf_r+0x2e>
 80037b8:	e7d6      	b.n	8003768 <__swbuf_r+0x2a>
	...

080037bc <__swsetup_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4b29      	ldr	r3, [pc, #164]	@ (8003864 <__swsetup_r+0xa8>)
 80037c0:	4605      	mov	r5, r0
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	460c      	mov	r4, r1
 80037c6:	b118      	cbz	r0, 80037d0 <__swsetup_r+0x14>
 80037c8:	6a03      	ldr	r3, [r0, #32]
 80037ca:	b90b      	cbnz	r3, 80037d0 <__swsetup_r+0x14>
 80037cc:	f7ff fa70 	bl	8002cb0 <__sinit>
 80037d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d4:	0719      	lsls	r1, r3, #28
 80037d6:	d422      	bmi.n	800381e <__swsetup_r+0x62>
 80037d8:	06da      	lsls	r2, r3, #27
 80037da:	d407      	bmi.n	80037ec <__swsetup_r+0x30>
 80037dc:	2209      	movs	r2, #9
 80037de:	602a      	str	r2, [r5, #0]
 80037e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037e4:	81a3      	strh	r3, [r4, #12]
 80037e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037ea:	e033      	b.n	8003854 <__swsetup_r+0x98>
 80037ec:	0758      	lsls	r0, r3, #29
 80037ee:	d512      	bpl.n	8003816 <__swsetup_r+0x5a>
 80037f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037f2:	b141      	cbz	r1, 8003806 <__swsetup_r+0x4a>
 80037f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d002      	beq.n	8003802 <__swsetup_r+0x46>
 80037fc:	4628      	mov	r0, r5
 80037fe:	f000 f90d 	bl	8003a1c <_free_r>
 8003802:	2300      	movs	r3, #0
 8003804:	6363      	str	r3, [r4, #52]	@ 0x34
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	2300      	movs	r3, #0
 8003810:	6063      	str	r3, [r4, #4]
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	b94b      	cbnz	r3, 8003836 <__swsetup_r+0x7a>
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382c:	d003      	beq.n	8003836 <__swsetup_r+0x7a>
 800382e:	4621      	mov	r1, r4
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f83f 	bl	80038b4 <__smakebuf_r>
 8003836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800383a:	f013 0201 	ands.w	r2, r3, #1
 800383e:	d00a      	beq.n	8003856 <__swsetup_r+0x9a>
 8003840:	2200      	movs	r2, #0
 8003842:	60a2      	str	r2, [r4, #8]
 8003844:	6962      	ldr	r2, [r4, #20]
 8003846:	4252      	negs	r2, r2
 8003848:	61a2      	str	r2, [r4, #24]
 800384a:	6922      	ldr	r2, [r4, #16]
 800384c:	b942      	cbnz	r2, 8003860 <__swsetup_r+0xa4>
 800384e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003852:	d1c5      	bne.n	80037e0 <__swsetup_r+0x24>
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	0799      	lsls	r1, r3, #30
 8003858:	bf58      	it	pl
 800385a:	6962      	ldrpl	r2, [r4, #20]
 800385c:	60a2      	str	r2, [r4, #8]
 800385e:	e7f4      	b.n	800384a <__swsetup_r+0x8e>
 8003860:	2000      	movs	r0, #0
 8003862:	e7f7      	b.n	8003854 <__swsetup_r+0x98>
 8003864:	20000020 	.word	0x20000020

08003868 <__swhatbuf_r>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	460c      	mov	r4, r1
 800386c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003870:	2900      	cmp	r1, #0
 8003872:	b096      	sub	sp, #88	@ 0x58
 8003874:	4615      	mov	r5, r2
 8003876:	461e      	mov	r6, r3
 8003878:	da0d      	bge.n	8003896 <__swhatbuf_r+0x2e>
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	bf14      	ite	ne
 8003886:	2340      	movne	r3, #64	@ 0x40
 8003888:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800388c:	2000      	movs	r0, #0
 800388e:	6031      	str	r1, [r6, #0]
 8003890:	602b      	str	r3, [r5, #0]
 8003892:	b016      	add	sp, #88	@ 0x58
 8003894:	bd70      	pop	{r4, r5, r6, pc}
 8003896:	466a      	mov	r2, sp
 8003898:	f000 f858 	bl	800394c <_fstat_r>
 800389c:	2800      	cmp	r0, #0
 800389e:	dbec      	blt.n	800387a <__swhatbuf_r+0x12>
 80038a0:	9901      	ldr	r1, [sp, #4]
 80038a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038aa:	4259      	negs	r1, r3
 80038ac:	4159      	adcs	r1, r3
 80038ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038b2:	e7eb      	b.n	800388c <__swhatbuf_r+0x24>

080038b4 <__smakebuf_r>:
 80038b4:	898b      	ldrh	r3, [r1, #12]
 80038b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038b8:	079d      	lsls	r5, r3, #30
 80038ba:	4606      	mov	r6, r0
 80038bc:	460c      	mov	r4, r1
 80038be:	d507      	bpl.n	80038d0 <__smakebuf_r+0x1c>
 80038c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	6123      	str	r3, [r4, #16]
 80038c8:	2301      	movs	r3, #1
 80038ca:	6163      	str	r3, [r4, #20]
 80038cc:	b003      	add	sp, #12
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d0:	ab01      	add	r3, sp, #4
 80038d2:	466a      	mov	r2, sp
 80038d4:	f7ff ffc8 	bl	8003868 <__swhatbuf_r>
 80038d8:	9f00      	ldr	r7, [sp, #0]
 80038da:	4605      	mov	r5, r0
 80038dc:	4639      	mov	r1, r7
 80038de:	4630      	mov	r0, r6
 80038e0:	f7ff fc24 	bl	800312c <_malloc_r>
 80038e4:	b948      	cbnz	r0, 80038fa <__smakebuf_r+0x46>
 80038e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ea:	059a      	lsls	r2, r3, #22
 80038ec:	d4ee      	bmi.n	80038cc <__smakebuf_r+0x18>
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	81a3      	strh	r3, [r4, #12]
 80038f8:	e7e2      	b.n	80038c0 <__smakebuf_r+0xc>
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	6020      	str	r0, [r4, #0]
 80038fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800390a:	b15b      	cbz	r3, 8003924 <__smakebuf_r+0x70>
 800390c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003910:	4630      	mov	r0, r6
 8003912:	f000 f82d 	bl	8003970 <_isatty_r>
 8003916:	b128      	cbz	r0, 8003924 <__smakebuf_r+0x70>
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	431d      	orrs	r5, r3
 8003928:	81a5      	strh	r5, [r4, #12]
 800392a:	e7cf      	b.n	80038cc <__smakebuf_r+0x18>

0800392c <_close_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4d06      	ldr	r5, [pc, #24]	@ (8003948 <_close_r+0x1c>)
 8003930:	2300      	movs	r3, #0
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	f7fe ff6a 	bl	8002810 <_close>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_close_r+0x1a>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_close_r+0x1a>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	200002e8 	.word	0x200002e8

0800394c <_fstat_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d07      	ldr	r5, [pc, #28]	@ (800396c <_fstat_r+0x20>)
 8003950:	2300      	movs	r3, #0
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	f7fe ff9c 	bl	8002896 <_fstat>
 800395e:	1c43      	adds	r3, r0, #1
 8003960:	d102      	bne.n	8003968 <_fstat_r+0x1c>
 8003962:	682b      	ldr	r3, [r5, #0]
 8003964:	b103      	cbz	r3, 8003968 <_fstat_r+0x1c>
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	bd38      	pop	{r3, r4, r5, pc}
 800396a:	bf00      	nop
 800396c:	200002e8 	.word	0x200002e8

08003970 <_isatty_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4d06      	ldr	r5, [pc, #24]	@ (800398c <_isatty_r+0x1c>)
 8003974:	2300      	movs	r3, #0
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7ff f8ee 	bl	8002b5c <_isatty>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_isatty_r+0x1a>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b103      	cbz	r3, 800398a <_isatty_r+0x1a>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	200002e8 	.word	0x200002e8

08003990 <_lseek_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d07      	ldr	r5, [pc, #28]	@ (80039b0 <_lseek_r+0x20>)
 8003994:	4604      	mov	r4, r0
 8003996:	4608      	mov	r0, r1
 8003998:	4611      	mov	r1, r2
 800399a:	2200      	movs	r2, #0
 800399c:	602a      	str	r2, [r5, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	f7fe fef7 	bl	8002792 <_lseek>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_lseek_r+0x1e>
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_lseek_r+0x1e>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	200002e8 	.word	0x200002e8

080039b4 <_read_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	4d07      	ldr	r5, [pc, #28]	@ (80039d4 <_read_r+0x20>)
 80039b8:	4604      	mov	r4, r0
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	602a      	str	r2, [r5, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f7fe fe8f 	bl	80026e6 <_read>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d102      	bne.n	80039d2 <_read_r+0x1e>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	b103      	cbz	r3, 80039d2 <_read_r+0x1e>
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
 80039d4:	200002e8 	.word	0x200002e8

080039d8 <_sbrk_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d06      	ldr	r5, [pc, #24]	@ (80039f4 <_sbrk_r+0x1c>)
 80039dc:	2300      	movs	r3, #0
 80039de:	4604      	mov	r4, r0
 80039e0:	4608      	mov	r0, r1
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	f7fd f94e 	bl	8000c84 <_sbrk>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_sbrk_r+0x1a>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_sbrk_r+0x1a>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	200002e8 	.word	0x200002e8

080039f8 <_write_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4d07      	ldr	r5, [pc, #28]	@ (8003a18 <_write_r+0x20>)
 80039fc:	4604      	mov	r4, r0
 80039fe:	4608      	mov	r0, r1
 8003a00:	4611      	mov	r1, r2
 8003a02:	2200      	movs	r2, #0
 8003a04:	602a      	str	r2, [r5, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7fe fed5 	bl	80027b6 <_write>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_write_r+0x1e>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_write_r+0x1e>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	200002e8 	.word	0x200002e8

08003a1c <_free_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4605      	mov	r5, r0
 8003a20:	2900      	cmp	r1, #0
 8003a22:	d041      	beq.n	8003aa8 <_free_r+0x8c>
 8003a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a28:	1f0c      	subs	r4, r1, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfb8      	it	lt
 8003a2e:	18e4      	addlt	r4, r4, r3
 8003a30:	f7ff fe36 	bl	80036a0 <__malloc_lock>
 8003a34:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <_free_r+0x90>)
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	b933      	cbnz	r3, 8003a48 <_free_r+0x2c>
 8003a3a:	6063      	str	r3, [r4, #4]
 8003a3c:	6014      	str	r4, [r2, #0]
 8003a3e:	4628      	mov	r0, r5
 8003a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a44:	f7ff be32 	b.w	80036ac <__malloc_unlock>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d908      	bls.n	8003a5e <_free_r+0x42>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	1821      	adds	r1, r4, r0
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf01      	itttt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	e7ed      	b.n	8003a3a <_free_r+0x1e>
 8003a5e:	461a      	mov	r2, r3
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	b10b      	cbz	r3, 8003a68 <_free_r+0x4c>
 8003a64:	42a3      	cmp	r3, r4
 8003a66:	d9fa      	bls.n	8003a5e <_free_r+0x42>
 8003a68:	6811      	ldr	r1, [r2, #0]
 8003a6a:	1850      	adds	r0, r2, r1
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d10b      	bne.n	8003a88 <_free_r+0x6c>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	4401      	add	r1, r0
 8003a74:	1850      	adds	r0, r2, r1
 8003a76:	4283      	cmp	r3, r0
 8003a78:	6011      	str	r1, [r2, #0]
 8003a7a:	d1e0      	bne.n	8003a3e <_free_r+0x22>
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	4408      	add	r0, r1
 8003a84:	6010      	str	r0, [r2, #0]
 8003a86:	e7da      	b.n	8003a3e <_free_r+0x22>
 8003a88:	d902      	bls.n	8003a90 <_free_r+0x74>
 8003a8a:	230c      	movs	r3, #12
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	e7d6      	b.n	8003a3e <_free_r+0x22>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf04      	itt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	bf04      	itt	eq
 8003aa0:	1809      	addeq	r1, r1, r0
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	6054      	str	r4, [r2, #4]
 8003aa6:	e7ca      	b.n	8003a3e <_free_r+0x22>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	bf00      	nop
 8003aac:	200002e4 	.word	0x200002e4

08003ab0 <_init>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr

08003abc <_fini>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr
