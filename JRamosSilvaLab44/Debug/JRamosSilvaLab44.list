
JRamosSilvaLab44.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c70  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000e1c  08000e1c  00001e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e24  08000e24  00001e2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e24  08000e24  00001e2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e24  08000e2c  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e24  08000e24  00001e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e28  08000e28  00001e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001e2c  2**0
                  CONTENTS
 10 .bss          0000004c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001df4  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000879  00000000  00000000  00003c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  000044c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e7  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b7d  00000000  00000000  0000496f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000035a3  00000000  00000000  000074ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008ccd  00000000  00000000  0000aa8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001375c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000088c  00000000  00000000  000137a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0001402c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000e04 	.word	0x08000e04

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000e04 	.word	0x08000e04

080001ec <BothInt>:
void RedInt()
{
    initializeLED(RedLED);
}
void BothInt()
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    initializeLED(RedLED);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 fb79 	bl	80008e8 <initializeLED>
    initializeLED(GreenLED);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 fb76 	bl	80008e8 <initializeLED>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}

08000200 <GreenToggle>:
        GreenOff();
    }
}

// toggle LED
void GreenToggle(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
    toggleLED(GreenLED);
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fbb9 	bl	800097c <toggleLED>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <delayProto>:
}
void RedOff(){
    deactivateLED(RedLED);
}

void delayProto(uint32_t timeDelay){
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	@ 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    char name[NAME_LENGTH] = "Joel";
 8000218:	4a15      	ldr	r2, [pc, #84]	@ (8000270 <delayProto+0x60>)
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000222:	6018      	str	r0, [r3, #0]
 8000224:	3304      	adds	r3, #4
 8000226:	7019      	strb	r1, [r3, #0]
    [[maybe_unused]] char destination[NAME_LENGTH];
    for (int i = 0; i < timeDelay; i++)
 8000228:	2300      	movs	r3, #0
 800022a:	61fb      	str	r3, [r7, #28]
 800022c:	e016      	b.n	800025c <delayProto+0x4c>
    {
        for (int j = 0; j < NAME_LENGTH; j++)
 800022e:	2300      	movs	r3, #0
 8000230:	61bb      	str	r3, [r7, #24]
 8000232:	e00d      	b.n	8000250 <delayProto+0x40>
        {
            destination[j] = name[j];
 8000234:	f107 0210 	add.w	r2, r7, #16
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	4413      	add	r3, r2
 800023c:	7819      	ldrb	r1, [r3, #0]
 800023e:	f107 0208 	add.w	r2, r7, #8
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	4413      	add	r3, r2
 8000246:	460a      	mov	r2, r1
 8000248:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < NAME_LENGTH; j++)
 800024a:	69bb      	ldr	r3, [r7, #24]
 800024c:	3301      	adds	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
 8000250:	69bb      	ldr	r3, [r7, #24]
 8000252:	2b04      	cmp	r3, #4
 8000254:	ddee      	ble.n	8000234 <delayProto+0x24>
    for (int i = 0; i < timeDelay; i++)
 8000256:	69fb      	ldr	r3, [r7, #28]
 8000258:	3301      	adds	r3, #1
 800025a:	61fb      	str	r3, [r7, #28]
 800025c:	69fb      	ldr	r3, [r7, #28]
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	429a      	cmp	r2, r3
 8000262:	d8e4      	bhi.n	800022e <delayProto+0x1e>
        }
    }
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	3724      	adds	r7, #36	@ 0x24
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	08000e1c 	.word	0x08000e1c

08000274 <Application_ButtonInitInterruptMode>:

#if DAUL_TIMER_USAGE
void Application_ButtonInitInterruptMode(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    // Initialize the button for interrupt mode
    ButtonDriver_InitInterruptMode();
 8000278:	f000 f866 	bl	8000348 <ButtonDriver_InitInterruptMode>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <Application_Init>:
#endif


void Application_Init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

    BothInt();
 8000284:	f7ff ffb2 	bl	80001ec <BothInt>

#if DAUL_TIMER_USAGE
    // Timer 5 and Button Initialization for DAUL_TIMER_USAGE = 1
    Application_ButtonInitInterruptMode();
 8000288:	f7ff fff4 	bl	8000274 <Application_ButtonInitInterruptMode>
    LED_timer5Init();
 800028c:	f000 fb9c 	bl	80009c8 <LED_timer5Init>
    LED_timer2Init();
    LED_timer2Start();
#endif

    // Common initialization logic
    addScheduledEvents(DELAYEVENT);
 8000290:	2002      	movs	r0, #2
 8000292:	f000 fd57 	bl	8000d44 <addScheduledEvents>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <TIM5_IRQHandler>:

#endif

// Timer 5's Interrupt Handler - Compile in only if DAUL_TIMER_USAGE is 1
#if DAUL_TIMER_USAGE
void TIM5_IRQHandler(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	TimerInterrupt(TIM5, DISABLE);
 80002a0:	2100      	movs	r1, #0
 80002a2:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <TIM5_IRQHandler+0x3c>)
 80002a4:	f000 fd10 	bl	8000cc8 <TimerInterrupt>
    if (TIM5->TIMx_SR & 0x1) // Check update interrupt flag
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <TIM5_IRQHandler+0x3c>)
 80002aa:	691b      	ldr	r3, [r3, #16]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d00a      	beq.n	80002ca <TIM5_IRQHandler+0x2e>
    {
        TIM5->TIMx_SR &= ~(0x01); // Clear interrupt flag
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <TIM5_IRQHandler+0x3c>)
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <TIM5_IRQHandler+0x3c>)
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	6113      	str	r3, [r2, #16]
        IRQ_clear(TIM5_IRQ_NUMBER);
 80002c0:	2032      	movs	r0, #50	@ 0x32
 80002c2:	f000 facd 	bl	8000860 <IRQ_clear>
        GreenToggle();
 80002c6:	f7ff ff9b 	bl	8000200 <GreenToggle>
    }
	TimerInterrupt(TIM5, ENABLE);
 80002ca:	2101      	movs	r1, #1
 80002cc:	4802      	ldr	r0, [pc, #8]	@ (80002d8 <TIM5_IRQHandler+0x3c>)
 80002ce:	f000 fcfb 	bl	8000cc8 <TimerInterrupt>

}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40000c00 	.word	0x40000c00

080002dc <EXTI0_IRQHandler>:
#endif

#if DAUL_TIMER_USAGE
void EXTI0_IRQHandler(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
    // Disable the interrupt
    GPIO_NVIC_enable_disable(EXTI0_IRQ_NUMBER, DISABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2006      	movs	r0, #6
 80002e6:	f000 fa47 	bl	8000778 <GPIO_NVIC_enable_disable>

    if (ButtonDriver_buttonPressed()){
 80002ea:	f000 f81d 	bl	8000328 <ButtonDriver_buttonPressed>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d002      	beq.n	80002fa <EXTI0_IRQHandler+0x1e>
		LED_timer5Start();
 80002f4:	f000 fb9c 	bl	8000a30 <LED_timer5Start>
 80002f8:	e00b      	b.n	8000312 <EXTI0_IRQHandler+0x36>

    }
    else{
		LED_timer5Stop();
 80002fa:	f000 fba3 	bl	8000a44 <LED_timer5Stop>
		uint32_t elapsedTime = LED_CountValue5();
 80002fe:	f000 fbb5 	bl	8000a6c <LED_CountValue5>
 8000302:	6078      	str	r0, [r7, #4]
		LED_configAutoReload5(elapsedTime);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 fbbd 	bl	8000a84 <LED_configAutoReload5>
		LED_timer5Reset();
 800030a:	f000 fba5 	bl	8000a58 <LED_timer5Reset>
		LED_timer5Start(); // Start Timer 5 to wait for the duration
 800030e:	f000 fb8f 	bl	8000a30 <LED_timer5Start>
    }
	EXTI_IRQ_clearPending(BUTTON_PIN_NUMBER);
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fad2 	bl	80008bc <EXTI_IRQ_clearPending>
	GPIO_NVIC_enable_disable(EXTI0_IRQ_NUMBER, ENABLE);
 8000318:	2101      	movs	r1, #1
 800031a:	2006      	movs	r0, #6
 800031c:	f000 fa2c 	bl	8000778 <GPIO_NVIC_enable_disable>

}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <ButtonDriver_buttonPressed>:
{
    GPIO_clockHandler(BUTTON_PORT_VALUE, ENABLE);
}

bool ButtonDriver_buttonPressed()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
    if (GPIO_readPin(GPIOA, BUTTON_PIN_NUMBER) == BUTTON_ON)
 800032c:	2100      	movs	r1, #0
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <ButtonDriver_buttonPressed+0x1c>)
 8000330:	f000 f9f0 	bl	8000714 <GPIO_readPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d101      	bne.n	800033e <ButtonDriver_buttonPressed+0x16>
    {
        return true;
 800033a:	2301      	movs	r3, #1
 800033c:	e000      	b.n	8000340 <ButtonDriver_buttonPressed+0x18>
    }
    else
    {
        return false;
 800033e:	2300      	movs	r3, #0
    }
}
 8000340:	4618      	mov	r0, r3
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40020000 	.word	0x40020000

08000348 <ButtonDriver_InitInterruptMode>:
void ButtonDriver_InitInterruptMode()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
    GPIO_Handle_t buttonConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]


    buttonConfig.pGPIOx = BUTTON_PORT_VALUE;
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <ButtonDriver_InitInterruptMode+0x4c>)
 800035a:	607b      	str	r3, [r7, #4]
    buttonConfig.GPIO_PinConfig.PinNumber = BUTTON_PIN_NUMBER;
 800035c:	2300      	movs	r3, #0
 800035e:	723b      	strb	r3, [r7, #8]
    buttonConfig.GPIO_PinConfig.PinMode = INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	727b      	strb	r3, [r7, #9]
    buttonConfig.GPIO_PinConfig.PinSpeed = LOW_SPEED;
 8000364:	2300      	movs	r3, #0
 8000366:	72fb      	strb	r3, [r7, #11]
    buttonConfig.GPIO_PinConfig.PinPuPdControl = NO_PULL;
 8000368:	2300      	movs	r3, #0
 800036a:	733b      	strb	r3, [r7, #12]
    // add this for interrupt
    buttonConfig.GPIO_PinConfig.GPIO_PinIntMode = GPIO_INT_RISING_FALLING_EDGE;
 800036c:	2303      	movs	r3, #3
 800036e:	73bb      	strb	r3, [r7, #14]

    // Enable the button clock
    GPIO_clockHandler(buttonConfig.pGPIOx, ENABLE);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2101      	movs	r1, #1
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f80f 	bl	8000398 <GPIO_clockHandler>
    GPIO_initialize(&buttonConfig);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f867 	bl	8000450 <GPIO_initialize>

    GPIO_NVIC_enable_disable(EXTI0_IRQ_NUMBER, ENABLE);
 8000382:	2101      	movs	r1, #1
 8000384:	2006      	movs	r0, #6
 8000386:	f000 f9f7 	bl	8000778 <GPIO_NVIC_enable_disable>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40020000 	.word	0x40020000

08000398 <GPIO_clockHandler>:
 */

#include <GPIO_Driver.h>

void GPIO_clockHandler(GPIO_RegDef_t *ptr, uint8_t toggle)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
    if (ptr == GPIOG && toggle == 1)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a1d      	ldr	r2, [pc, #116]	@ (800041c <GPIO_clockHandler+0x84>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d109      	bne.n	80003c0 <GPIO_clockHandler+0x28>
 80003ac:	78fb      	ldrb	r3, [r7, #3]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d106      	bne.n	80003c0 <GPIO_clockHandler+0x28>
    {
        AHB1_CLOCK_ENABLE(GPIOG_OFFSET);
 80003b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <GPIO_clockHandler+0x88>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000420 <GPIO_clockHandler+0x88>)
 80003b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80003be:	e00c      	b.n	80003da <GPIO_clockHandler+0x42>
    }
    else if (ptr == GPIOG && toggle == 0)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a16      	ldr	r2, [pc, #88]	@ (800041c <GPIO_clockHandler+0x84>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d108      	bne.n	80003da <GPIO_clockHandler+0x42>
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d105      	bne.n	80003da <GPIO_clockHandler+0x42>
    {
        AHB1_CLOCK_DISABLE(GPIOG_OFFSET);
 80003ce:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <GPIO_clockHandler+0x88>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a13      	ldr	r2, [pc, #76]	@ (8000420 <GPIO_clockHandler+0x88>)
 80003d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    if (ptr == GPIOA && toggle == 1)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a11      	ldr	r2, [pc, #68]	@ (8000424 <GPIO_clockHandler+0x8c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d109      	bne.n	80003f6 <GPIO_clockHandler+0x5e>
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d106      	bne.n	80003f6 <GPIO_clockHandler+0x5e>
    {
        AHB1_CLOCK_ENABLE(GPIOA_OFFSET);
 80003e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <GPIO_clockHandler+0x88>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000420 <GPIO_clockHandler+0x88>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
    }
    else if (ptr == GPIOA && toggle == 0)
    {
        AHB1_CLOCK_DISABLE(GPIOA_OFFSET);
    }
}
 80003f4:	e00c      	b.n	8000410 <GPIO_clockHandler+0x78>
    else if (ptr == GPIOA && toggle == 0)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <GPIO_clockHandler+0x8c>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d108      	bne.n	8000410 <GPIO_clockHandler+0x78>
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <GPIO_clockHandler+0x78>
        AHB1_CLOCK_DISABLE(GPIOA_OFFSET);
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <GPIO_clockHandler+0x88>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a05      	ldr	r2, [pc, #20]	@ (8000420 <GPIO_clockHandler+0x88>)
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021800 	.word	0x40021800
 8000420:	40023800 	.word	0x40023800
 8000424:	40020000 	.word	0x40020000

08000428 <GPIO_togglePin>:
        ptr->GPIOx_ODR |= (1 << writePin);
    }
}

void GPIO_togglePin(GPIO_RegDef_t *ptr, uint8_t pinNum)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
    // switches between high and low states, only target pin is changed
    ptr->GPIOx_ODR ^= (1 << pinNum);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	78fa      	ldrb	r2, [r7, #3]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	405a      	eors	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	615a      	str	r2, [r3, #20]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <GPIO_initialize>:

void GPIO_initialize(GPIO_Handle_t *ptr)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    // moder config
    uint32_t temp = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
    // get the pin mode and pin numbers
    temp = (ptr->GPIO_PinConfig.PinMode << (2 * ptr->GPIO_PinConfig.PinNumber));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	617b      	str	r3, [r7, #20]
    // clear the moder
    ptr->pGPIOx->GPIOx_MODER &= ~(0x3 << (2 * ptr->GPIO_PinConfig.PinNumber));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	791b      	ldrb	r3, [r3, #4]
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	2103      	movs	r1, #3
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	43db      	mvns	r3, r3
 8000482:	4619      	mov	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	400a      	ands	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
    // update the moder
    ptr->pGPIOx->GPIOx_MODER |= temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6819      	ldr	r1, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	697a      	ldr	r2, [r7, #20]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]

    // speed register
    temp = (ptr->GPIO_PinConfig.PinSpeed << (2 * ptr->GPIO_PinConfig.PinNumber));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	79db      	ldrb	r3, [r3, #7]
 80004a0:	461a      	mov	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	617b      	str	r3, [r7, #20]
    ptr->pGPIOx->GPIOx_OSPEEDR &= ~(0x3 << (2 * ptr->GPIO_PinConfig.PinNumber));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	689a      	ldr	r2, [r3, #8]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	2103      	movs	r1, #3
 80004bc:	fa01 f303 	lsl.w	r3, r1, r3
 80004c0:	43db      	mvns	r3, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	400a      	ands	r2, r1
 80004ca:	609a      	str	r2, [r3, #8]
    ptr->pGPIOx->GPIOx_OSPEEDR |= temp;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6899      	ldr	r1, [r3, #8]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	697a      	ldr	r2, [r7, #20]
 80004d8:	430a      	orrs	r2, r1
 80004da:	609a      	str	r2, [r3, #8]

    // pull-up/pull-down
    temp = (ptr->GPIO_PinConfig.PinPuPdControl << (2 * ptr->GPIO_PinConfig.PinNumber));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7a1b      	ldrb	r3, [r3, #8]
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	617b      	str	r3, [r7, #20]
    ptr->pGPIOx->GPIOA_PUPDR &= ~(0x3 << (2 * ptr->GPIO_PinConfig.PinNumber));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68da      	ldr	r2, [r3, #12]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	60da      	str	r2, [r3, #12]
    ptr->pGPIOx->GPIOA_PUPDR |= temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68d9      	ldr	r1, [r3, #12]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	60da      	str	r2, [r3, #12]

    // output type
    temp = (ptr->GPIO_PinConfig.OPType << ptr->GPIO_PinConfig.PinNumber);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
    ptr->pGPIOx->GPIOx_OTYPER &= ~(1 << ptr->GPIO_PinConfig.PinNumber);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	4619      	mov	r1, r3
 8000538:	2301      	movs	r3, #1
 800053a:	408b      	lsls	r3, r1
 800053c:	43db      	mvns	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	400a      	ands	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
    ptr->pGPIOx->GPIOx_OTYPER |= temp;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6859      	ldr	r1, [r3, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	430a      	orrs	r2, r1
 8000556:	605a      	str	r2, [r3, #4]

    // alternate function
    if (ptr->GPIO_PinConfig.PinMode == ALTERNATE_FUNCTION)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d133      	bne.n	80005c8 <GPIO_initialize+0x178>
    {
        uint32_t HighLowReg = ptr->GPIO_PinConfig.PinNumber / 8;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	08db      	lsrs	r3, r3, #3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	613b      	str	r3, [r7, #16]
        uint32_t correctBits = ptr->GPIO_PinConfig.PinNumber % 8;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

        temp = (ptr->GPIO_PinConfig.PinAltFunMode << (4 * correctBits));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7a5b      	ldrb	r3, [r3, #9]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
        // clears the register
        ptr->pGPIOx->GPIOx_AFR[HighLowReg] &= ~(0xF << (4 * correctBits));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	3208      	adds	r2, #8
 800058c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	210f      	movs	r1, #15
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4011      	ands	r1, r2
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	3208      	adds	r2, #8
 80005a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // changes it to correct bits
        ptr->pGPIOx->GPIOx_AFR[HighLowReg] |= temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	3208      	adds	r2, #8
 80005b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	4311      	orrs	r1, r2
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	3208      	adds	r2, #8
 80005c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    // Interrupt configuration
    if (ptr->GPIO_PinConfig.GPIO_PinIntMode != GPIO_INT_DISABLE)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7a9b      	ldrb	r3, [r3, #10]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	f000 8096 	beq.w	80006fe <GPIO_initialize+0x2ae>
    {

        uint8_t position = ptr->GPIO_PinConfig.PinNumber % 4;       // gets bit position, so we mod 4
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	f003 0303 	and.w	r3, r3, #3
 80005da:	72fb      	strb	r3, [r7, #11]
        uint8_t register_index = ptr->GPIO_PinConfig.PinNumber / 4; // get correct exti register
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	72bb      	strb	r3, [r7, #10]
        uint16_t port_code = GPIO_portNum(ptr->pGPIOx);             // Get the correct gpio port
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8a9 	bl	8000740 <GPIO_portNum>
 80005ee:	4603      	mov	r3, r0
 80005f0:	813b      	strh	r3, [r7, #8]

        SYSCONFIG_CLOCK_ENABLE(SYSCONFIG_OFFSET);
 80005f2:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <GPIO_initialize+0x2b8>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	4a44      	ldr	r2, [pc, #272]	@ (8000708 <GPIO_initialize+0x2b8>)
 80005f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fc:	6453      	str	r3, [r2, #68]	@ 0x44

        SYSCONFIG->SYSCFG_EXTICR[register_index] &= ~(0xF << (position * 4));      // Clear the EXTI configuration for the pin
 80005fe:	4a43      	ldr	r2, [pc, #268]	@ (800070c <GPIO_initialize+0x2bc>)
 8000600:	7abb      	ldrb	r3, [r7, #10]
 8000602:	3302      	adds	r3, #2
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	210f      	movs	r1, #15
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	4618      	mov	r0, r3
 8000616:	493d      	ldr	r1, [pc, #244]	@ (800070c <GPIO_initialize+0x2bc>)
 8000618:	7abb      	ldrb	r3, [r7, #10]
 800061a:	4002      	ands	r2, r0
 800061c:	3302      	adds	r3, #2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCONFIG->SYSCFG_EXTICR[register_index] |= (port_code << (position * 4)); // Set the EXTI configuration for the pin
 8000622:	4a3a      	ldr	r2, [pc, #232]	@ (800070c <GPIO_initialize+0x2bc>)
 8000624:	7abb      	ldrb	r3, [r7, #10]
 8000626:	3302      	adds	r3, #2
 8000628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062c:	8939      	ldrh	r1, [r7, #8]
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	4618      	mov	r0, r3
 8000638:	4934      	ldr	r1, [pc, #208]	@ (800070c <GPIO_initialize+0x2bc>)
 800063a:	7abb      	ldrb	r3, [r7, #10]
 800063c:	4302      	orrs	r2, r0
 800063e:	3302      	adds	r3, #2
 8000640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Configure EXTI interrupt mode
        if (ptr->GPIO_PinConfig.GPIO_PinIntMode == GPIO_INT_RISING_EDGE)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7a9b      	ldrb	r3, [r3, #10]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d117      	bne.n	800067c <GPIO_initialize+0x22c>
        {
            // enable rising edge trigger, disable falling edge trigger
            EXTI->EXTI_RTSR |= (1 << ptr->GPIO_PinConfig.PinNumber);
 800064c:	4b30      	ldr	r3, [pc, #192]	@ (8000710 <GPIO_initialize+0x2c0>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	4611      	mov	r1, r2
 800065c:	4a2c      	ldr	r2, [pc, #176]	@ (8000710 <GPIO_initialize+0x2c0>)
 800065e:	430b      	orrs	r3, r1
 8000660:	6093      	str	r3, [r2, #8]
            EXTI->EXTI_FTSR &= ~(1 << ptr->GPIO_PinConfig.PinNumber);
 8000662:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <GPIO_initialize+0x2c0>)
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	7912      	ldrb	r2, [r2, #4]
 800066a:	4611      	mov	r1, r2
 800066c:	2201      	movs	r2, #1
 800066e:	408a      	lsls	r2, r1
 8000670:	43d2      	mvns	r2, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <GPIO_initialize+0x2c0>)
 8000676:	400b      	ands	r3, r1
 8000678:	60d3      	str	r3, [r2, #12]
 800067a:	e035      	b.n	80006e8 <GPIO_initialize+0x298>
        }
        else if (ptr->GPIO_PinConfig.GPIO_PinIntMode == GPIO_INT_FALLING_EDGE)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7a9b      	ldrb	r3, [r3, #10]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d117      	bne.n	80006b4 <GPIO_initialize+0x264>
        {
            // enable falling edge trigger, disable rising edge trigger
            EXTI->EXTI_FTSR |= (1 << ptr->GPIO_PinConfig.PinNumber);
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <GPIO_initialize+0x2c0>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	7912      	ldrb	r2, [r2, #4]
 800068c:	4611      	mov	r1, r2
 800068e:	2201      	movs	r2, #1
 8000690:	408a      	lsls	r2, r1
 8000692:	4611      	mov	r1, r2
 8000694:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <GPIO_initialize+0x2c0>)
 8000696:	430b      	orrs	r3, r1
 8000698:	60d3      	str	r3, [r2, #12]
            EXTI->EXTI_RTSR &= ~(1 << ptr->GPIO_PinConfig.PinNumber);
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <GPIO_initialize+0x2c0>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	7912      	ldrb	r2, [r2, #4]
 80006a2:	4611      	mov	r1, r2
 80006a4:	2201      	movs	r2, #1
 80006a6:	408a      	lsls	r2, r1
 80006a8:	43d2      	mvns	r2, r2
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006ae:	400b      	ands	r3, r1
 80006b0:	6093      	str	r3, [r2, #8]
 80006b2:	e019      	b.n	80006e8 <GPIO_initialize+0x298>
        }
        else if (ptr->GPIO_PinConfig.GPIO_PinIntMode == GPIO_INT_RISING_FALLING_EDGE)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7a9b      	ldrb	r3, [r3, #10]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d115      	bne.n	80006e8 <GPIO_initialize+0x298>
        {
            // enable rising and falling edge triggers
            EXTI->EXTI_RTSR |= (1 << ptr->GPIO_PinConfig.PinNumber);
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7912      	ldrb	r2, [r2, #4]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6093      	str	r3, [r2, #8]
            EXTI->EXTI_FTSR |= (1 << ptr->GPIO_PinConfig.PinNumber);
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	7912      	ldrb	r2, [r2, #4]
 80006da:	4611      	mov	r1, r2
 80006dc:	2201      	movs	r2, #1
 80006de:	408a      	lsls	r2, r1
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	60d3      	str	r3, [r2, #12]
        }

        // Enable interrupt delivery
        EXTI->EXTI_IMR |= (1 << ptr->GPIO_PinConfig.PinNumber);
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	7912      	ldrb	r2, [r2, #4]
 80006f0:	4611      	mov	r1, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	408a      	lsls	r2, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <GPIO_initialize+0x2c0>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6013      	str	r3, [r2, #0]
    }
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40010ed8 	.word	0x40010ed8
 8000710:	40013c00 	.word	0x40013c00

08000714 <GPIO_readPin>:

uint8_t GPIO_readPin(GPIO_RegDef_t *ptr, uint8_t pinNumber)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
    uint8_t val = ((ptr->GPIOx_IDR >> pinNumber) & 0x01);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	fa22 f303 	lsr.w	r3, r2, r3
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
    return val;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <GPIO_portNum>:
uint16_t GPIO_portNum(GPIO_RegDef_t *ptr)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    if (ptr == GPIOA)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a09      	ldr	r2, [pc, #36]	@ (8000770 <GPIO_portNum+0x30>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d101      	bne.n	8000754 <GPIO_portNum+0x14>
        return GPIO_PORT_NUMBER_A;
 8000750:	2300      	movs	r3, #0
 8000752:	e007      	b.n	8000764 <GPIO_portNum+0x24>

    if (ptr == GPIOG)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <GPIO_portNum+0x34>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d101      	bne.n	8000760 <GPIO_portNum+0x20>
        return GPIO_PORT_NUMBER_G;
 800075c:	2306      	movs	r3, #6
 800075e:	e001      	b.n	8000764 <GPIO_portNum+0x24>

    return 0xFFFF;
 8000760:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40020000 	.word	0x40020000
 8000774:	40021800 	.word	0x40021800

08000778 <GPIO_NVIC_enable_disable>:

void GPIO_NVIC_enable_disable(uint8_t irqNum, uint8_t enable_disable)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
    if (enable_disable) // Enable interrupt
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <GPIO_NVIC_enable_disable+0x20>
    {
        IRQ_enable(irqNum);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f809 	bl	80007a8 <IRQ_enable>
    }
    else // Disable interrupt
    {
        IRQ_disable(irqNum);
    }
}
 8000796:	e003      	b.n	80007a0 <GPIO_NVIC_enable_disable+0x28>
        IRQ_disable(irqNum);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f832 	bl	8000804 <IRQ_disable>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <IRQ_enable>:
 *      Author: joelrsilva
 */

#include <InterruptControl.h>

void IRQ_enable(uint8_t irqNumber){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]

    if (irqNumber < 32){
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b1f      	cmp	r3, #31
 80007b6:	d80c      	bhi.n	80007d2 <IRQ_enable+0x2a>
        *NVIC_ISER0 |= (1 << (irqNumber % 32));
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <IRQ_enable+0x54>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	f002 021f 	and.w	r2, r2, #31
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <IRQ_enable+0x54>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	6013      	str	r3, [r2, #0]
    }
    else if (irqNumber < 64){
        *NVIC_ISER1 |= (1 << (irqNumber % 32));
    }
}
 80007d0:	e00e      	b.n	80007f0 <IRQ_enable+0x48>
    else if (irqNumber < 64){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80007d6:	d80b      	bhi.n	80007f0 <IRQ_enable+0x48>
        *NVIC_ISER1 |= (1 << (irqNumber % 32));
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <IRQ_enable+0x58>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	f002 021f 	and.w	r2, r2, #31
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <IRQ_enable+0x58>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000e104 	.word	0xe000e104

08000804 <IRQ_disable>:
void IRQ_disable(uint8_t irqNumber){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    if (irqNumber < 32){
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b1f      	cmp	r3, #31
 8000812:	d80c      	bhi.n	800082e <IRQ_disable+0x2a>
        *NVIC_ICER0 |= (1 << (irqNumber % 32));
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <IRQ_disable+0x54>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	f002 021f 	and.w	r2, r2, #31
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	4611      	mov	r1, r2
 8000826:	4a0c      	ldr	r2, [pc, #48]	@ (8000858 <IRQ_disable+0x54>)
 8000828:	430b      	orrs	r3, r1
 800082a:	6013      	str	r3, [r2, #0]
    }
    else if (irqNumber < 64){
        *NVIC_ICER1 |= (1 << (irqNumber % 32));
    }
}
 800082c:	e00e      	b.n	800084c <IRQ_disable+0x48>
    else if (irqNumber < 64){
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b3f      	cmp	r3, #63	@ 0x3f
 8000832:	d80b      	bhi.n	800084c <IRQ_disable+0x48>
        *NVIC_ICER1 |= (1 << (irqNumber % 32));
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <IRQ_disable+0x58>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	f002 021f 	and.w	r2, r2, #31
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	@ (800085c <IRQ_disable+0x58>)
 8000848:	430b      	orrs	r3, r1
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e180 	.word	0xe000e180
 800085c:	e000e184 	.word	0xe000e184

08000860 <IRQ_clear>:
    else if (irqNumber < 64){
        *NVIC_ISPR1 |= (1 << (irqNumber % 32));
    }
}

void IRQ_clear(uint8_t irqNumber){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
    if (irqNumber < 32){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b1f      	cmp	r3, #31
 800086e:	d80c      	bhi.n	800088a <IRQ_clear+0x2a>
        *NVIC_ICPR0 |= (1 << (irqNumber % 32));
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <IRQ_clear+0x54>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	f002 021f 	and.w	r2, r2, #31
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	4611      	mov	r1, r2
 8000882:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <IRQ_clear+0x54>)
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
    }
    else if (irqNumber < 64){
        *NVIC_ICPR1 |= (1 << (irqNumber % 32));
    }
}
 8000888:	e00e      	b.n	80008a8 <IRQ_clear+0x48>
    else if (irqNumber < 64){
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b3f      	cmp	r3, #63	@ 0x3f
 800088e:	d80b      	bhi.n	80008a8 <IRQ_clear+0x48>
        *NVIC_ICPR1 |= (1 << (irqNumber % 32));
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <IRQ_clear+0x58>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	79fa      	ldrb	r2, [r7, #7]
 8000896:	f002 021f 	and.w	r2, r2, #31
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a05      	ldr	r2, [pc, #20]	@ (80008b8 <IRQ_clear+0x58>)
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e300 	.word	0xe000e300
 80008b8:	e000e304 	.word	0xe000e304

080008bc <EXTI_IRQ_clearPending>:


void EXTI_IRQ_clearPending(uint8_t pinNumber){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

    EXTI->EXTI_PR |= (1 << pinNumber);
 80008c6:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <EXTI_IRQ_clearPending+0x28>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	2101      	movs	r1, #1
 80008ce:	fa01 f202 	lsl.w	r2, r1, r2
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	@ (80008e4 <EXTI_IRQ_clearPending+0x28>)
 80008d6:	430b      	orrs	r3, r1
 80008d8:	6153      	str	r3, [r2, #20]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	40013c00 	.word	0x40013c00

080008e8 <initializeLED>:
static GPIO_Handle_t red;
static GPIO_Handle_t green;
static Timer_Handle_t timer2Handle;
static Timer_Handle_t timer5Handle;

void initializeLED(uint8_t led){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]

    switch (led){
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d01b      	beq.n	8000930 <initializeLED+0x48>
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d133      	bne.n	8000964 <initializeLED+0x7c>
    case RedLED:
        red.pGPIOx = GPIOG;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <initializeLED+0x88>)
 80008fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000974 <initializeLED+0x8c>)
 8000900:	601a      	str	r2, [r3, #0]
        red.GPIO_PinConfig.PinNumber = ODR14;
 8000902:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <initializeLED+0x88>)
 8000904:	220e      	movs	r2, #14
 8000906:	711a      	strb	r2, [r3, #4]
        red.GPIO_PinConfig.PinMode = OUTPUT;
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <initializeLED+0x88>)
 800090a:	2201      	movs	r2, #1
 800090c:	715a      	strb	r2, [r3, #5]
        red.GPIO_PinConfig.PinSpeed = HIGHEST_SPEED;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <initializeLED+0x88>)
 8000910:	220b      	movs	r2, #11
 8000912:	71da      	strb	r2, [r3, #7]
        red.GPIO_PinConfig.OPType = PUSH_PULL;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <initializeLED+0x88>)
 8000916:	2200      	movs	r2, #0
 8000918:	719a      	strb	r2, [r3, #6]
        red.GPIO_PinConfig.PinPuPdControl = NO_PULL;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <initializeLED+0x88>)
 800091c:	2200      	movs	r2, #0
 800091e:	721a      	strb	r2, [r3, #8]
        GPIO_clockHandler(GPIOG, ENABLE);
 8000920:	2101      	movs	r1, #1
 8000922:	4814      	ldr	r0, [pc, #80]	@ (8000974 <initializeLED+0x8c>)
 8000924:	f7ff fd38 	bl	8000398 <GPIO_clockHandler>
        GPIO_initialize(&red);
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <initializeLED+0x88>)
 800092a:	f7ff fd91 	bl	8000450 <GPIO_initialize>
        break;
 800092e:	e01a      	b.n	8000966 <initializeLED+0x7e>

    case GreenLED:
        green.pGPIOx = GPIOG;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <initializeLED+0x90>)
 8000932:	4a10      	ldr	r2, [pc, #64]	@ (8000974 <initializeLED+0x8c>)
 8000934:	601a      	str	r2, [r3, #0]
        green.GPIO_PinConfig.PinNumber = ODR13;
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <initializeLED+0x90>)
 8000938:	220d      	movs	r2, #13
 800093a:	711a      	strb	r2, [r3, #4]
        green.GPIO_PinConfig.PinMode = OUTPUT;
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <initializeLED+0x90>)
 800093e:	2201      	movs	r2, #1
 8000940:	715a      	strb	r2, [r3, #5]
        green.GPIO_PinConfig.PinSpeed = HIGH_SPEED;
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <initializeLED+0x90>)
 8000944:	220a      	movs	r2, #10
 8000946:	71da      	strb	r2, [r3, #7]
        green.GPIO_PinConfig.OPType = PUSH_PULL;
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <initializeLED+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	719a      	strb	r2, [r3, #6]
        green.GPIO_PinConfig.PinPuPdControl = NO_PULL;
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <initializeLED+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	721a      	strb	r2, [r3, #8]
        GPIO_clockHandler(GPIOG, ENABLE);
 8000954:	2101      	movs	r1, #1
 8000956:	4807      	ldr	r0, [pc, #28]	@ (8000974 <initializeLED+0x8c>)
 8000958:	f7ff fd1e 	bl	8000398 <GPIO_clockHandler>
        GPIO_initialize(&green);
 800095c:	4806      	ldr	r0, [pc, #24]	@ (8000978 <initializeLED+0x90>)
 800095e:	f7ff fd77 	bl	8000450 <GPIO_initialize>
        break;
 8000962:	e000      	b.n	8000966 <initializeLED+0x7e>
    default:
        break;
 8000964:	bf00      	nop
    }
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000001c 	.word	0x2000001c
 8000974:	40021800 	.word	0x40021800
 8000978:	20000028 	.word	0x20000028

0800097c <toggleLED>:
void toggleLED(uint8_t led){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
    switch (led){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00a      	beq.n	80009a2 <toggleLED+0x26>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d111      	bne.n	80009b4 <toggleLED+0x38>

    case RedLED:
    	GPIO_togglePin(red.pGPIOx, red.GPIO_PinConfig.PinNumber);
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <toggleLED+0x44>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <toggleLED+0x44>)
 8000996:	7912      	ldrb	r2, [r2, #4]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fd44 	bl	8000428 <GPIO_togglePin>
        break;
 80009a0:	e009      	b.n	80009b6 <toggleLED+0x3a>

    case GreenLED:
    	GPIO_togglePin(green.pGPIOx, green.GPIO_PinConfig.PinNumber);
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <toggleLED+0x48>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <toggleLED+0x48>)
 80009a8:	7912      	ldrb	r2, [r2, #4]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fd3b 	bl	8000428 <GPIO_togglePin>
        break;
 80009b2:	e000      	b.n	80009b6 <toggleLED+0x3a>
    default:
        break;
 80009b4:	bf00      	nop
    }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000001c 	.word	0x2000001c
 80009c4:	20000028 	.word	0x20000028

080009c8 <LED_timer5Init>:
void LED_timer2Reset(){
    TimerReset(TIM2);
}


void LED_timer5Init(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    timer5Handle.p = TIM5;
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <LED_timer5Init+0x60>)
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <LED_timer5Init+0x64>)
 80009d0:	601a      	str	r2, [r3, #0]

    timer5Handle.timerConfig.PrescalerValue = 0;
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <LED_timer5Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	819a      	strh	r2, [r3, #12]
    timer5Handle.timerConfig.AutoReloadValue = 0xffffffff;
 80009d8:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <LED_timer5Init+0x60>)
 80009da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009de:	605a      	str	r2, [r3, #4]
    timer5Handle.timerConfig.ClockDivisionSelection = TIMER_CLOCK_DIV_4;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <LED_timer5Init+0x60>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	729a      	strb	r2, [r3, #10]
    timer5Handle.timerConfig.MasterModeSelection = TIMER_MASTER_MODE_RESET;
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <LED_timer5Init+0x60>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	811a      	strh	r2, [r3, #8]
    timer5Handle.timerConfig.OnePulseModeEnablement = false;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <LED_timer5Init+0x60>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	74da      	strb	r2, [r3, #19]
    timer5Handle.timerConfig.TimerCountDownModeEnablement = false;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <LED_timer5Init+0x60>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	741a      	strb	r2, [r3, #16]
    timer5Handle.timerConfig.InterruptUpdateEnablement = true;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <LED_timer5Init+0x60>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	745a      	strb	r2, [r3, #17]
    timer5Handle.timerConfig.DisableUpdateEvent = false;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <LED_timer5Init+0x60>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	749a      	strb	r2, [r3, #18]
    timer5Handle.timerConfig.CenterAlignedModeSelection = TIMER_MODE_EDGE_ALIGNED;
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <LED_timer5Init+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	739a      	strb	r2, [r3, #14]

    Timer_Clock_Control(timer5Handle.p, TIMER_ENABLE);
 8000a0a:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <LED_timer5Init+0x60>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f8fd 	bl	8000c10 <Timer_Clock_Control>
    initTimer(&timer5Handle);
 8000a16:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <LED_timer5Init+0x60>)
 8000a18:	f000 f844 	bl	8000aa4 <initTimer>
    IRQ_enable(50);
 8000a1c:	2032      	movs	r0, #50	@ 0x32
 8000a1e:	f7ff fec3 	bl	80007a8 <IRQ_enable>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000034 	.word	0x20000034
 8000a2c:	40000c00 	.word	0x40000c00

08000a30 <LED_timer5Start>:


void LED_timer5Start(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    TimerStart(TIM5);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <LED_timer5Start+0x10>)
 8000a36:	f000 f923 	bl	8000c80 <TimerStart>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40000c00 	.word	0x40000c00

08000a44 <LED_timer5Stop>:

void LED_timer5Stop(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    TimerStop(TIM5);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <LED_timer5Stop+0x10>)
 8000a4a:	f000 f925 	bl	8000c98 <TimerStop>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40000c00 	.word	0x40000c00

08000a58 <LED_timer5Reset>:

void LED_timer5Reset(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    TimerReset(TIM5);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <LED_timer5Reset+0x10>)
 8000a5e:	f000 f927 	bl	8000cb0 <TimerReset>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40000c00 	.word	0x40000c00

08000a6c <LED_CountValue5>:

uint8_t LED_AutoReload5(){
    return timer5Handle.p->TIMx_ARR;
}

uint32_t LED_CountValue5(){
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
    return timer5Handle.p->TIMx_CNT;
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <LED_CountValue5+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000034 	.word	0x20000034

08000a84 <LED_configAutoReload5>:

void LED_configAutoReload5(uint32_t val){
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    timer5Handle.p->TIMx_ARR = val;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <LED_configAutoReload5+0x1c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000034 	.word	0x20000034

08000aa4 <initTimer>:
#include <Time_Driver.h>

void initTimer(Timer_Handle_t *t){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    t->p->TIMx_CR1 &= ~TIMER_CR1_CKD_MASK;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000aba:	601a      	str	r2, [r3, #0]
    t->p->TIMx_CR1 |= (t->timerConfig.ClockDivisionSelection << 8);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6819      	ldr	r1, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a9b      	ldrb	r3, [r3, #10]
 8000ac6:	021a      	lsls	r2, r3, #8
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]

    t->p->TIMx_CR1 &= ~TIMER_CR1_CAM_MASK;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000ade:	601a      	str	r2, [r3, #0]
    t->p->TIMx_CR1 |= (t->timerConfig.CenterAlignedModeSelection << 5);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7b9b      	ldrb	r3, [r3, #14]
 8000aea:	015a      	lsls	r2, r3, #5
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]

    if (t->timerConfig.TimerCountDownModeEnablement){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7c1b      	ldrb	r3, [r3, #16]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d008      	beq.n	8000b0e <initTimer+0x6a>
        t->p->TIMx_CR1 |= (1U << TIMER_CR1_DIR_BIT_POS);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0210 	orr.w	r2, r2, #16
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e007      	b.n	8000b1e <initTimer+0x7a>
    }
    else{
        t->p->TIMx_CR1 &= ~(1U << TIMER_CR1_DIR_BIT_POS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 0210 	bic.w	r2, r2, #16
 8000b1c:	601a      	str	r2, [r3, #0]
    }

    if (t->timerConfig.AutoReloadBufferEnablement){
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7bdb      	ldrb	r3, [r3, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d008      	beq.n	8000b38 <initTimer+0x94>
        t->p->TIMx_CR1 |= (1U << TIMER_CR1_ARPE_BIT_POS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e007      	b.n	8000b48 <initTimer+0xa4>
    }
    else{
        t->p->TIMx_CR1 &= ~(1U << TIMER_CR1_ARPE_BIT_POS);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b46:	601a      	str	r2, [r3, #0]
    }

    if (t->timerConfig.OnePulseModeEnablement){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7cdb      	ldrb	r3, [r3, #19]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d008      	beq.n	8000b62 <initTimer+0xbe>
        t->p->TIMx_CR1 |= (1U << TIMER_CR1_OPM_BIT_POS);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f042 0208 	orr.w	r2, r2, #8
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e007      	b.n	8000b72 <initTimer+0xce>
    }
    else{
        t->p->TIMx_CR1 &= ~(1U << TIMER_CR1_OPM_BIT_POS);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0208 	bic.w	r2, r2, #8
 8000b70:	601a      	str	r2, [r3, #0]
    }

    if (t->timerConfig.DisableUpdateEvent){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7c9b      	ldrb	r3, [r3, #18]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <initTimer+0xe8>
        t->p->TIMx_CR1 |= (1U << TIMER_CR1_UDIS_BIT_POS);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 0202 	orr.w	r2, r2, #2
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e007      	b.n	8000b9c <initTimer+0xf8>
    }
    else{
        t->p->TIMx_CR1 &= ~(1U << TIMER_CR1_UDIS_BIT_POS);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 0202 	bic.w	r2, r2, #2
 8000b9a:	601a      	str	r2, [r3, #0]
    }

    if (t->timerConfig.InterruptUpdateEnablement){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7c5b      	ldrb	r3, [r3, #17]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d008      	beq.n	8000bb6 <initTimer+0x112>
        t->p->TIMx_DIER |= (1U << TIMER_INTERRUPT_BIT_POS);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0202 	orr.w	r2, r2, #2
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e007      	b.n	8000bc6 <initTimer+0x122>
    }
    else{
        t->p->TIMx_DIER &= ~(1U << TIMER_INTERRUPT_BIT_POS);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0202 	bic.w	r2, r2, #2
 8000bc4:	60da      	str	r2, [r3, #12]
    }
    if (t->timerConfig.MasterModeSelection){
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	891b      	ldrh	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <initTimer+0x13c>
        t->p->TIMx_CCR2 |= (1U << TIMER_CR2_MASTERMODE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0210 	orr.w	r2, r2, #16
 8000bdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bde:	e007      	b.n	8000bf0 <initTimer+0x14c>
    }

    else{
        t->p->TIMx_CCR2 &= ~(1U << TIMER_CR2_MASTERMODE);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0210 	bic.w	r2, r2, #16
 8000bee:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    t->p->TIMx_PSC = t->timerConfig.PrescalerValue;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	899a      	ldrh	r2, [r3, #12]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	629a      	str	r2, [r3, #40]	@ 0x28
    t->p->TIMx_ARR = t->timerConfig.AutoReloadValue;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6852      	ldr	r2, [r2, #4]
 8000c02:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
	...

08000c10 <Timer_Clock_Control>:

void Timer_Clock_Control(GPTIMR_RegDef_t *ptr, uint8_t toggle)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
    if (ptr == TIM2){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c22:	d110      	bne.n	8000c46 <Timer_Clock_Control+0x36>
        if (toggle == ENABLE)
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d106      	bne.n	8000c38 <Timer_Clock_Control+0x28>
        {
            APB1_CLOCK_ENABLE(TIM2_OFFSET);
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
        else
        {
            APB1_CLOCK_DISABLE(TIM5_OFFSET);
        }
    }
}
 8000c36:	e01a      	b.n	8000c6e <Timer_Clock_Control+0x5e>
            APB1_CLOCK_DISABLE(TIM2_OFFSET);
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c44:	e013      	b.n	8000c6e <Timer_Clock_Control+0x5e>
    else if (ptr == TIM5)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <Timer_Clock_Control+0x6c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10f      	bne.n	8000c6e <Timer_Clock_Control+0x5e>
        if (toggle == ENABLE)
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d106      	bne.n	8000c62 <Timer_Clock_Control+0x52>
            APB1_CLOCK_ENABLE(TIM5_OFFSET);
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c60:	e005      	b.n	8000c6e <Timer_Clock_Control+0x5e>
            APB1_CLOCK_DISABLE(TIM5_OFFSET);
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <Timer_Clock_Control+0x68>)
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40000c00 	.word	0x40000c00

08000c80 <TimerStart>:

void TimerStart(GPTIMR_RegDef_t *ptr){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    ptr->TIMx_CR1 = TIMER_ENABLE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <TimerStop>:

void TimerStop(GPTIMR_RegDef_t *ptr){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    ptr->TIMx_CR1 = TIMER_DISABLE;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <TimerReset>:

void TimerReset(GPTIMR_RegDef_t *ptr){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    ptr->TIMx_CNT = 0U;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <TimerInterrupt>:

uint32_t TimerVal(GPTIMR_RegDef_t *ptr){
    return ptr->TIMx_CNT;
}

void TimerInterrupt(GPTIMR_RegDef_t *ptr, uint8_t toggle){
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
    if (toggle == ENABLE){
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d106      	bne.n	8000ce8 <TimerInterrupt+0x20>
        ptr->TIMx_DIER |= (1U << TIMER_DIER_UIE_BIT_POS);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60da      	str	r2, [r3, #12]
    }
    else if (toggle == DISABLE){
        ptr->TIMx_DIER &= ~(1U << TIMER_DIER_UIE_BIT_POS);
    }
}
 8000ce6:	e008      	b.n	8000cfa <TimerInterrupt+0x32>
    else if (toggle == DISABLE){
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <TimerInterrupt+0x32>
        ptr->TIMx_DIER &= ~(1U << TIMER_DIER_UIE_BIT_POS);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f023 0201 	bic.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60da      	str	r2, [r3, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  uint32_t events2run = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]

  // Initialize the application, which sets up peripherals, LEDs, buttons, etc.
  Application_Init();
 8000d0e:	f7ff fab7 	bl	8000280 <Application_Init>

  /* Loop forever */
  for (;;){
    // Fetch the events that are scheduled to run
    events2run = getScheduledEvents();
 8000d12:	f000 f80d 	bl	8000d30 <getScheduledEvents>
 8000d16:	6078      	str	r0, [r7, #4]
      RedToggle();
    }

#endif

    if (events2run & DELAYEVENT){
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f7      	beq.n	8000d12 <main+0xe>
      delayProto(DEFAULT_VAL);
 8000d22:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <main+0x28>)
 8000d24:	f7ff fa74 	bl	8000210 <delayProto>
    events2run = getScheduledEvents();
 8000d28:	e7f3      	b.n	8000d12 <main+0xe>
 8000d2a:	bf00      	nop
 8000d2c:	0003d090 	.word	0x0003d090

08000d30 <getScheduledEvents>:
#include <scheduler.h>


static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents(){
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
    return scheduledEvents;
 8000d34:	4b02      	ldr	r3, [pc, #8]	@ (8000d40 <getScheduledEvents+0x10>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	20000048 	.word	0x20000048

08000d44 <addScheduledEvents>:
void addScheduledEvents(uint32_t event){
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    scheduledEvents |= (event);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <addScheduledEvents+0x20>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <addScheduledEvents+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000048 	.word	0x20000048

08000d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d68:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopForever+0xe>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopForever+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d96:	f000 f811 	bl	8000dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff ffb3 	bl	8000d04 <main>

08000d9e <LoopForever>:

LoopForever:
  b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   r0, =_estack
 8000da0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000dac:	08000e2c 	.word	0x08000e2c
  ldr r2, =_sbss
 8000db0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000db4:	2000004c 	.word	0x2000004c

08000db8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <__libc_init_array>:
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8000df4 <__libc_init_array+0x38>)
 8000dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8000df8 <__libc_init_array+0x3c>)
 8000dc2:	1b64      	subs	r4, r4, r5
 8000dc4:	10a4      	asrs	r4, r4, #2
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	42a6      	cmp	r6, r4
 8000dca:	d109      	bne.n	8000de0 <__libc_init_array+0x24>
 8000dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8000dfc <__libc_init_array+0x40>)
 8000dce:	4c0c      	ldr	r4, [pc, #48]	@ (8000e00 <__libc_init_array+0x44>)
 8000dd0:	f000 f818 	bl	8000e04 <_init>
 8000dd4:	1b64      	subs	r4, r4, r5
 8000dd6:	10a4      	asrs	r4, r4, #2
 8000dd8:	2600      	movs	r6, #0
 8000dda:	42a6      	cmp	r6, r4
 8000ddc:	d105      	bne.n	8000dea <__libc_init_array+0x2e>
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de4:	4798      	blx	r3
 8000de6:	3601      	adds	r6, #1
 8000de8:	e7ee      	b.n	8000dc8 <__libc_init_array+0xc>
 8000dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dee:	4798      	blx	r3
 8000df0:	3601      	adds	r6, #1
 8000df2:	e7f2      	b.n	8000dda <__libc_init_array+0x1e>
 8000df4:	08000e24 	.word	0x08000e24
 8000df8:	08000e24 	.word	0x08000e24
 8000dfc:	08000e24 	.word	0x08000e24
 8000e00:	08000e28 	.word	0x08000e28

08000e04 <_init>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	bf00      	nop
 8000e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0a:	bc08      	pop	{r3}
 8000e0c:	469e      	mov	lr, r3
 8000e0e:	4770      	bx	lr

08000e10 <_fini>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	bf00      	nop
 8000e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e16:	bc08      	pop	{r3}
 8000e18:	469e      	mov	lr, r3
 8000e1a:	4770      	bx	lr
